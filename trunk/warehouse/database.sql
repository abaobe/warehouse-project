--------------------------------------------------------
--  File created - Tuesday-June-03-2014   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Type STATISTICS_NUMBERS
--------------------------------------------------------

  CREATE OR REPLACE TYPE "ORCL"."STATISTICS_NUMBERS" AS OBJECT 
( /* TODO enter attribute and method declarations here */ 
  users_count NUMBER,products_count NUMBER,orders_count NUMBER,subDepartments_count NUMBER
)

/
--------------------------------------------------------
--  DDL for Type SYS_PLSQL_13697_9_1
--------------------------------------------------------

  CREATE OR REPLACE TYPE "ORCL"."SYS_PLSQL_13697_9_1" as table of ORCL."STATISTICS_NUMBERS";

/
--------------------------------------------------------
--  DDL for Type SYS_PLSQL_13697_DUMMY_1
--------------------------------------------------------

  CREATE OR REPLACE TYPE "ORCL"."SYS_PLSQL_13697_DUMMY_1" as table of number;

/
--------------------------------------------------------
--  DDL for Sequence BORROWING_VOUCHER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORCL"."BORROWING_VOUCHER_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 47 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence CATEGORIES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORCL"."CATEGORIES_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 161 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence COMPANIES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORCL"."COMPANIES_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence DEPARTMENTS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORCL"."DEPARTMENTS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence INSERT_NUMBER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORCL"."INSERT_NUMBER_SEQ"  MINVALUE 1 MAXVALUE 99999999999999999 INCREMENT BY 1 START WITH 99 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ORDERED_SUPPLIES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORCL"."ORDERED_SUPPLIES_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 421 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ORDER_NUMBER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORCL"."ORDER_NUMBER_SEQ"  MINVALUE 1 MAXVALUE 99999999999999999 INCREMENT BY 1 START WITH 53 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence PRODUCTS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORCL"."PRODUCTS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 241 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence RETURN_VOUCHER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORCL"."RETURN_VOUCHER_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SERVICES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORCL"."SERVICES_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 221 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SUPPLIES_CORRUPTED_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORCL"."SUPPLIES_CORRUPTED_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TEMPORARY_OUTPUT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORCL"."TEMPORARY_OUTPUT_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence USERS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORCL"."USERS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence VOUCHER_INSERT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORCL"."VOUCHER_INSERT_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 581 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence VOUCHER_OUTPUT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORCL"."VOUCHER_OUTPUT_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 261 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Table BORROWING_VOUCHER
--------------------------------------------------------

  CREATE TABLE "ORCL"."BORROWING_VOUCHER" 
   (	"VOUCHER_ID" NUMBER, 
	"ORDER_SUPPLIES_ID" NUMBER, 
	"ADDED_DATE" DATE DEFAULT sysdate, 
	"NOTES" VARCHAR2(100 BYTE), 
	"INSERTED_VOUCHERID" NUMBER, 
	"RETURN_DATE" VARCHAR2(35 BYTE), 
	"ORDER_STATUS" VARCHAR2(25 BYTE) DEFAULT 'active'
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CATEGORIES
--------------------------------------------------------

  CREATE TABLE "ORCL"."CATEGORIES" 
   (	"CATEGORY_ID" NUMBER, 
	"CATEGORY_NAME" VARCHAR2(50 BYTE), 
	"CATEGORY_DESCRIPTION" VARCHAR2(100 BYTE), 
	"PARENT_ID" NUMBER DEFAULT 0, 
	"INC_NUMBER" NUMBER DEFAULT 0
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table COMPANIES
--------------------------------------------------------

  CREATE TABLE "ORCL"."COMPANIES" 
   (	"COMPANY_ID" NUMBER, 
	"COMPANY_NAME" VARCHAR2(35 BYTE), 
	"LICENSE_NUMBER" VARCHAR2(25 BYTE), 
	"TELEPHONE" VARCHAR2(30 BYTE), 
	"MOBILE" VARCHAR2(30 BYTE), 
	"ADDRESS" VARCHAR2(40 BYTE), 
	"FAX_NUMBER" VARCHAR2(30 BYTE)
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table DEPARTMENTS
--------------------------------------------------------

  CREATE TABLE "ORCL"."DEPARTMENTS" 
   (	"DEPARTMENT_ID" NUMBER, 
	"DEPARTMENT_NAME" VARCHAR2(70 BYTE), 
	"ADDRESS" VARCHAR2(100 BYTE), 
	"PHONE" VARCHAR2(30 BYTE), 
	"NOTES" VARCHAR2(100 BYTE), 
	"ADDED_DATE" DATE DEFAULT sysdate, 
	"PARENT_ID" NUMBER DEFAULT 0, 
	"MOBILE" VARCHAR2(30 BYTE), 
	"FAX" VARCHAR2(30 BYTE)
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ORDERED_SUPPLIES
--------------------------------------------------------

  CREATE TABLE "ORCL"."ORDERED_SUPPLIES" 
   (	"ORDER_ID" NUMBER, 
	"PRODUCT_ID" NUMBER, 
	"QUANTITY" NUMBER, 
	"DEPARTMENT_ID" NUMBER, 
	"ADDED_DATE" DATE DEFAULT sysdate, 
	"NOTES" VARCHAR2(100 BYTE), 
	"APPLICANT_ID" NUMBER, 
	"UNIT_TYPE" VARCHAR2(20 BYTE), 
	"ORDER_NUMBER" VARCHAR2(20 BYTE) DEFAULT NULL, 
	"STATUS" VARCHAR2(20 BYTE) DEFAULT 'waiting', 
	"SECTION_NAME" VARCHAR2(35 BYTE), 
	"EMPLOYEE_NAME" VARCHAR2(35 BYTE), 
	"EMPLOYEE_NUMBER" VARCHAR2(30 BYTE), 
	"ROOM_NUMBER" VARCHAR2(20 BYTE), 
	"NOTIFY_STATUS" VARCHAR2(15 BYTE) DEFAULT 'unreadable'
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PRODUCTS
--------------------------------------------------------

  CREATE TABLE "ORCL"."PRODUCTS" 
   (	"PRODUCT_ID" NUMBER, 
	"PRODUCT_NAME" VARCHAR2(40 BYTE), 
	"PRODUCT_NUMBER" VARCHAR2(25 BYTE), 
	"PRODUCT_TYPE" VARCHAR2(30 BYTE), 
	"NOTES" VARCHAR2(100 BYTE), 
	"CATEGORY_ID" NUMBER, 
	"WIDTH" VARCHAR2(20 BYTE), 
	"HEIGHT" VARCHAR2(20 BYTE), 
	"H_LENGTH" VARCHAR2(20 BYTE), 
	"RE_DEMAND_BORDER" NUMBER(15,0), 
	"PRIMARY_UNIT_NAME" VARCHAR2(25 BYTE), 
	"SECONDARY_UNIT_NAME" VARCHAR2(25 BYTE), 
	"PRIMARY_UNIT_QUANTITY" NUMBER(20,0), 
	"SECONDARY_UNIT_QUANTITY" NUMBER(20,0), 
	"QUANTITY_STATUS" VARCHAR2(30 BYTE) DEFAULT 'visible'
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table SERVICES
--------------------------------------------------------

  CREATE TABLE "ORCL"."SERVICES" 
   (	"SERVICE_ID" NUMBER, 
	"SERVICE_NAME" VARCHAR2(40 BYTE), 
	"SERVICE_COST" VARCHAR2(20 BYTE), 
	"BILLING_ID" VARCHAR2(20 BYTE), 
	"ADDED_DATE" DATE DEFAULT sysdate, 
	"CURRENCY_TYPE" VARCHAR2(20 BYTE), 
	"NOTES" VARCHAR2(100 BYTE), 
	"PROVIDED_BY" NUMBER, 
	"RECEIVED_DATE" VARCHAR2(40 BYTE), 
	"INSERT_NUMBER" VARCHAR2(40 BYTE), 
	"QUANTITY" NUMBER
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table STATIC_PRODUCT
--------------------------------------------------------

  CREATE TABLE "ORCL"."STATIC_PRODUCT" 
   (	"VOUCHER_ID" NUMBER, 
	"PRODUCT_STATUS" VARCHAR2(30 BYTE), 
	"PRODUCT_NATURE" VARCHAR2(30 BYTE), 
	"SUPPLY_TYPE" VARCHAR2(20 BYTE), 
	"EXPIRE_DATE" VARCHAR2(20 BYTE), 
	"SERIAL_NUMBER" VARCHAR2(25 BYTE), 
	"RESERVE_STATUS" VARCHAR2(25 BYTE) DEFAULT 'متاح'
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table SUPPLIES_CORRUPTED
--------------------------------------------------------

  CREATE TABLE "ORCL"."SUPPLIES_CORRUPTED" 
   (	"ORDER_ID" NUMBER, 
	"INSERT_VOUCHER_ID" NUMBER, 
	"MONITOR_WAYS" VARCHAR2(200 BYTE), 
	"CORRUPTED_DATE" DATE DEFAULT sysdate, 
	"DAMAGE_MEMBERS" NUMBER
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "ORCL"."SUPPLIES_CORRUPTED"."DAMAGE_MEMBERS" IS 'reference to group';
--------------------------------------------------------
--  DDL for Table TEMPORARY_OUTPUT
--------------------------------------------------------

  CREATE TABLE "ORCL"."TEMPORARY_OUTPUT" 
   (	"ORDER_ID" NUMBER, 
	"INSERT_VOUCHER_ID" NUMBER, 
	"REASONS" VARCHAR2(150 BYTE), 
	"COMPANY_ID" NUMBER, 
	"ADDED_DATE" DATE DEFAULT sysdate, 
	"ORDER_STATUS" VARCHAR2(20 BYTE) DEFAULT 'wait'
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table USERS
--------------------------------------------------------

  CREATE TABLE "ORCL"."USERS" 
   (	"USER_ID" NUMBER, 
	"FIRST_NAME" VARCHAR2(20 BYTE), 
	"MIDDLE_NAME" VARCHAR2(20 BYTE), 
	"LAST_NAME" VARCHAR2(25 BYTE), 
	"EMPLOYEE_NUMBER" NUMBER(30,0), 
	"PHONE_NUMBER" VARCHAR2(20 BYTE), 
	"EMAIL" VARCHAR2(50 BYTE), 
	"USERNAME" VARCHAR2(50 BYTE), 
	"USER_PASSWORD" VARCHAR2(50 BYTE), 
	"USER_ROLE" NUMBER, 
	"REGISTEREDDATE" DATE DEFAULT sysdate, 
	"LASTLOGGENINDATE" TIMESTAMP (6) DEFAULT sysdate, 
	"ACCOUNT_STATUS" VARCHAR2(20 BYTE), 
	"USER_PICTURE" VARCHAR2(50 BYTE), 
	"MOBILE_NUMBER" VARCHAR2(20 BYTE), 
	"DEPARTMENT_ID" NUMBER
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table USERS_ROLES
--------------------------------------------------------

  CREATE TABLE "ORCL"."USERS_ROLES" 
   (	"ROLE_ID" NUMBER, 
	"ROLE_NAME" VARCHAR2(35 BYTE)
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table VOUCHER_INSERT
--------------------------------------------------------

  CREATE TABLE "ORCL"."VOUCHER_INSERT" 
   (	"VOUCHER_ID" NUMBER, 
	"PRODUCT_ID" NUMBER, 
	"RECEIVED_FROM" NUMBER, 
	"BILLING_ID" VARCHAR2(20 BYTE), 
	"ADDED_DATE" DATE DEFAULT SYSDATE, 
	"NOTES" VARCHAR2(100 BYTE), 
	"RECEIVER_ID" NUMBER, 
	"QUANTITY" NUMBER DEFAULT 0, 
	"UNIT_PRICE" NUMBER, 
	"CURRENCY_TYPE" VARCHAR2(20 BYTE), 
	"UNIT_TYPE" VARCHAR2(20 BYTE), 
	"RECEIVED_DATE" VARCHAR2(40 BYTE), 
	"INSERT_NUMBER" VARCHAR2(40 BYTE)
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table VOUCHER_OUTPUT
--------------------------------------------------------

  CREATE TABLE "ORCL"."VOUCHER_OUTPUT" 
   (	"VOUCHER_ID" NUMBER, 
	"UNIT_TYPE" VARCHAR2(20 BYTE), 
	"QUANTITY_DISBURSED" NUMBER, 
	"ORDER_SUPPLIES_ID" NUMBER, 
	"ADDED_DATE" DATE DEFAULT sysdate, 
	"NOTES" VARCHAR2(100 BYTE)
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for View BORROWING_INFO
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "ORCL"."BORROWING_INFO" ("ADDED_DATE", "NOTES", "ORDER_SUPPLIES_ID", "VOUCHER_ID", "INSERTED_VOUCHERID", "ORDER_STATUS", "RETURN_DATE", "ORDER_NUMBER", "PRODUCT_ID", "DEPARTMENT_NAME", "DEPARTMENT_ID", "MAIN_DEPARTMENT", "PRODUCT_NAME", "EMPLOYEE_NAME", "EMPLOYEE_NUMBER", "ROOM_NUMBER", "SECTION_NAME", "SERIAL_NUMBER", "PRODUCT_STATUS") AS 
  SELECT b.added_date,b.notes,b.order_supplies_id,b.voucher_id,b.inserted_voucherid,b.order_status,return_date,
op.order_number,op.product_id,op.department_name,op.department_id,op.main_department,
op.product_name,op.employee_name,op.employee_number,op.room_number,op.section_name,
i.serial_number,i.product_status 
FROM borrowing_voucher b join orders_join_products op on b.order_supplies_id=op.order_id
join inserted_static_product i on b.inserted_voucherid=i.voucher_id;
--------------------------------------------------------
--  DDL for View INSERTED_STATIC_PRODUCT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "ORCL"."INSERTED_STATIC_PRODUCT" ("VOUCHER_ID", "PRODUCT_ID", "ADDED_DATE", "RECEIVED_FROM", "BILLING_ID", "NOTES", "QUANTITY", "UNIT_TYPE", "UNIT_PRICE", "CURRENCY_TYPE", "PRODUCT_STATUS", "PRODUCT_NATURE", "SUPPLY_TYPE", "EXPIRE_DATE", "SERIAL_NUMBER", "RESERVE_STATUS") AS 
  SELECT 
v.voucher_id,v.product_id,v.added_date,v.received_from,v.billing_id,v.notes,
v.quantity,v.unit_type,v.unit_price,v.currency_type,
s.product_status,s.product_nature,s.supply_type,s.expire_date,s.serial_number,s.reserve_status
FROM voucher_insert v join static_product s on v.voucher_id = s.voucher_id;
--------------------------------------------------------
--  DDL for View ORDERS_JOIN_PRODUCTS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "ORCL"."ORDERS_JOIN_PRODUCTS" ("PRODUCT_NAME", "PRODUCT_ID", "PRIMARY_UNIT_NAME", "SECONDARY_UNIT_NAME", "PRIMARY_UNIT_QUANTITY", "SECONDARY_UNIT_QUANTITY", "PRODUCT_TYPE", "STATUS", "ORDER_NUMBER", "QUANTITY", "DEPARTMENT_NAME", "DEPARTMENT_ID", "MAIN_DEPARTMENT", "ADDED_DATE", "NOTES", "UNIT_TYPE", "ORDER_ID", "SECTION_NAME", "EMPLOYEE_NAME", "EMPLOYEE_NUMBER", "ROOM_NUMBER", "NOTIFY_STATUS") AS 
  SELECT p.product_name,p.product_id,p.primary_unit_name,p.secondary_unit_name,p.primary_unit_quantity,p.secondary_unit_quantity,p.product_type,
s.status,s.order_number,s.quantity,d.department_name,d.department_id,DEPARTMENT_ACTIONS.GET_MAIN_DEPARTMENT(d.department_id) AS main_department,s.added_date,s.notes,s.unit_type,s.order_id,
s.section_name,s.employee_name,s.employee_number,s.room_number,s.notify_status
FROM products p join ordered_supplies s
on p.product_id = s.product_id join departments d on s.department_id=d.department_id;
--------------------------------------------------------
--  DDL for View PRODUCTS_ORDEREDBY_CATEGORY
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "ORCL"."PRODUCTS_ORDEREDBY_CATEGORY" ("PRODUCT_NAME", "PRODUCT_ID", "CATEGORY_NAME", "CATEGORY_ID") AS 
  SELECT 
    p.product_name,p.product_id,g.category_name,g.category_id
FROM products p,categories  g WHERE p.category_id = g.category_id ORDER BY g.category_id;
--------------------------------------------------------
--  DDL for View USER_INFORMATIONS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "ORCL"."USER_INFORMATIONS" ("USER_ID", "FIRST_NAME", "MIDDLE_NAME", "LAST_NAME", "EMPLOYEE_NUMBER", "PHONE_NUMBER", "EMAIL", "USERNAME", "USER_PASSWORD", "USER_ROLE", "REGISTEREDDATE", "LASTLOGGENINDATE", "ACCOUNT_STATUS", "USER_PICTURE", "MOBILE_NUMBER", "DEPARTMENT_ID", "DEPARTMENT_NAME", "ROLE_NAME") AS 
  SELECT u.*,d.department_name,r.role_name
FROM users u join departments d on u.department_id=d.department_id
join users_roles r on r.role_id=u.user_role;
REM INSERTING into ORCL.BORROWING_VOUCHER
SET DEFINE OFF;
Insert into ORCL.BORROWING_VOUCHER (VOUCHER_ID,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES,INSERTED_VOUCHERID,RETURN_DATE,ORDER_STATUS) values (19,285,to_date('07-APR-14','DD-MON-RR'),null,219,'2014/04/19','end');
Insert into ORCL.BORROWING_VOUCHER (VOUCHER_ID,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES,INSERTED_VOUCHERID,RETURN_DATE,ORDER_STATUS) values (20,141,to_date('07-APR-14','DD-MON-RR'),null,223,'2014/05/16','end');
Insert into ORCL.BORROWING_VOUCHER (VOUCHER_ID,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES,INSERTED_VOUCHERID,RETURN_DATE,ORDER_STATUS) values (23,141,to_date('07-APR-14','DD-MON-RR'),'ajskdlasj',222,'2014/04/10','end');
Insert into ORCL.BORROWING_VOUCHER (VOUCHER_ID,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES,INSERTED_VOUCHERID,RETURN_DATE,ORDER_STATUS) values (24,343,to_date('05-MAY-14','DD-MON-RR'),'kjskldasd',222,'2014/05/31','active');
Insert into ORCL.BORROWING_VOUCHER (VOUCHER_ID,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES,INSERTED_VOUCHERID,RETURN_DATE,ORDER_STATUS) values (17,283,to_date('05-APR-14','DD-MON-RR'),'test2',223,'2014/03/31','end');
Insert into ORCL.BORROWING_VOUCHER (VOUCHER_ID,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES,INSERTED_VOUCHERID,RETURN_DATE,ORDER_STATUS) values (26,183,to_date('31-MAY-14','DD-MON-RR'),'hsadjkasd',385,'2014/06/07','active');
Insert into ORCL.BORROWING_VOUCHER (VOUCHER_ID,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES,INSERTED_VOUCHERID,RETURN_DATE,ORDER_STATUS) values (25,125,to_date('31-MAY-14','DD-MON-RR'),'ashdjhksa',385,'2014/06/02','end');
Insert into ORCL.BORROWING_VOUCHER (VOUCHER_ID,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES,INSERTED_VOUCHERID,RETURN_DATE,ORDER_STATUS) values (27,183,to_date('02-JUN-14','DD-MON-RR'),'hjkh',385,'2014/05/01','active');
Insert into ORCL.BORROWING_VOUCHER (VOUCHER_ID,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES,INSERTED_VOUCHERID,RETURN_DATE,ORDER_STATUS) values (28,183,to_date('02-JUN-14','DD-MON-RR'),'jashdk',385,'2014/06/03','active');
Insert into ORCL.BORROWING_VOUCHER (VOUCHER_ID,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES,INSERTED_VOUCHERID,RETURN_DATE,ORDER_STATUS) values (29,183,to_date('02-JUN-14','DD-MON-RR'),'sjdlas',386,'2014/05/28','active');
Insert into ORCL.BORROWING_VOUCHER (VOUCHER_ID,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES,INSERTED_VOUCHERID,RETURN_DATE,ORDER_STATUS) values (30,182,to_date('02-JUN-14','DD-MON-RR'),'1',572,'2014/05/28','active');
Insert into ORCL.BORROWING_VOUCHER (VOUCHER_ID,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES,INSERTED_VOUCHERID,RETURN_DATE,ORDER_STATUS) values (31,183,to_date('02-JUN-14','DD-MON-RR'),'hkl',385,'2014/05/26','active');
Insert into ORCL.BORROWING_VOUCHER (VOUCHER_ID,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES,INSERTED_VOUCHERID,RETURN_DATE,ORDER_STATUS) values (43,186,to_date('02-JUN-14','DD-MON-RR'),'kjaskldasd',572,'2014/06/10','active');
Insert into ORCL.BORROWING_VOUCHER (VOUCHER_ID,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES,INSERTED_VOUCHERID,RETURN_DATE,ORDER_STATUS) values (33,183,to_date('02-JUN-14','DD-MON-RR'),'hkjh',385,'2014/06/17','active');
Insert into ORCL.BORROWING_VOUCHER (VOUCHER_ID,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES,INSERTED_VOUCHERID,RETURN_DATE,ORDER_STATUS) values (34,186,to_date('02-JUN-14','DD-MON-RR'),'jhalskd',572,'2014/05/27','active');
Insert into ORCL.BORROWING_VOUCHER (VOUCHER_ID,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES,INSERTED_VOUCHERID,RETURN_DATE,ORDER_STATUS) values (35,186,to_date('02-JUN-14','DD-MON-RR'),'sadjklasd',572,'2014/06/02','active');
Insert into ORCL.BORROWING_VOUCHER (VOUCHER_ID,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES,INSERTED_VOUCHERID,RETURN_DATE,ORDER_STATUS) values (36,186,to_date('02-JUN-14','DD-MON-RR'),'sadjklasd',572,'2014/06/02','active');
Insert into ORCL.BORROWING_VOUCHER (VOUCHER_ID,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES,INSERTED_VOUCHERID,RETURN_DATE,ORDER_STATUS) values (45,186,to_date('02-JUN-14','DD-MON-RR'),'kjaskldasd',572,'2014/06/10','active');
REM INSERTING into ORCL.CATEGORIES
SET DEFINE OFF;
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (116,'fff','sdjlkjasd',0,3);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (48,'second_two1_one',null,45,null);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (117,'f1',null,116,1);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (114,'asdasd',null,41,1);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (115,'asdsada',null,111,1);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (118,'f2',null,116,2);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (121,'uuuuuuuu',null,0,6);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (1,'أجهزة كهربائية','كل ما يتعلق بالأجهزة الكهربائية',0,null);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (2,'أجهزة الحاسوب','كل ما يتعلق بأجهزة الحاسوب وملحقاتة',0,null);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (3,'أثاث','كل ما يتعلق بالاثاث',0,null);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (41,'cat','maincategory',0,null);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (42,'day',null,41,null);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (43,'hour',null,41,null);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (44,'minute',null,41,null);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (45,'second',null,41,null);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (61,'اجهزة الكترونية','اجهزة الكترونية اجهزة الكترونية',0,null);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (62,'اجهزة الكترونية "ا"',null,61,null);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (63,'اللللل',null,61,null);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (111,'sad','asdas',0,2);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (81,'testhazim','hdkjsahdk',0,null);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (82,'hazim1',null,81,null);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (83,'sakdjlkasjd','asdasd',0,null);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (110,'dddd','sadsad',0,1);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (119,'sdads',null,0,4);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (120,'dfdfdfdfdfdfdfdfdf',null,0,5);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (122,'rrrrrrrrrrrrr',null,0,7);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (54,'saterday',null,42,null);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (141,'سينتشاسيسي','ساينتشساين',0,8);
Insert into ORCL.CATEGORIES (CATEGORY_ID,CATEGORY_NAME,CATEGORY_DESCRIPTION,PARENT_ID,INC_NUMBER) values (142,'سينتشاسيسي sub',null,54,1);
REM INSERTING into ORCL.COMPANIES
SET DEFINE OFF;
Insert into ORCL.COMPANIES (COMPANY_ID,COMPANY_NAME,LICENSE_NUMBER,TELEPHONE,MOBILE,ADDRESS,FAX_NUMBER) values (41,'JASDKJ','LKJSKLAJKLJ','JKLJASLDJL','KLJDLKFJLKJ','LKJDKSLJFLK','JDSFKJLK');
Insert into ORCL.COMPANIES (COMPANY_ID,COMPANY_NAME,LICENSE_NUMBER,TELEPHONE,MOBILE,ADDRESS,FAX_NUMBER) values (1,'مكتبة الارقم','4546','445644','645465',null,null);
Insert into ORCL.COMPANIES (COMPANY_ID,COMPANY_NAME,LICENSE_NUMBER,TELEPHONE,MOBILE,ADDRESS,FAX_NUMBER) values (2,'مكتبة افاق','6687','6876','6786',null,null);
Insert into ORCL.COMPANIES (COMPANY_ID,COMPANY_NAME,LICENSE_NUMBER,TELEPHONE,MOBILE,ADDRESS,FAX_NUMBER) values (22,'النهضة','1213265465','284111111','059995555','غزه',null);
REM INSERTING into ORCL.DEPARTMENTS
SET DEFINE OFF;
Insert into ORCL.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,ADDRESS,PHONE,NOTES,ADDED_DATE,PARENT_ID,MOBILE,FAX) values (1,'محكمة جباليا','جباليا البلد','28444444','ملاحظات',to_date('21-FEB-14','DD-MON-RR'),0,null,null);
Insert into ORCL.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,ADDRESS,PHONE,NOTES,ADDED_DATE,PARENT_ID,MOBILE,FAX) values (2,'محكمة صلح غزة','غزة - ملعب اليرموك','285555555555','ملاحظات',to_date('21-FEB-14','DD-MON-RR'),0,null,null);
Insert into ORCL.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,ADDRESS,PHONE,NOTES,ADDED_DATE,PARENT_ID,MOBILE,FAX) values (3,'محكمة صلح دير البلح','غزة الوسطى','28666666','ملاحظات',to_date('21-FEB-14','DD-MON-RR'),0,null,null);
Insert into ORCL.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,ADDRESS,PHONE,NOTES,ADDED_DATE,PARENT_ID,MOBILE,FAX) values (41,'محمكة خانيونس','al-remal',null,'test notes',to_date('18-APR-14','DD-MON-RR'),0,null,null);
Insert into ORCL.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,ADDRESS,PHONE,NOTES,ADDED_DATE,PARENT_ID,MOBILE,FAX) values (44,'فرع1','05555555555','08888888','test',to_date('18-APR-14','DD-MON-RR'),41,'055555555555','526547342');
Insert into ORCL.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,ADDRESS,PHONE,NOTES,ADDED_DATE,PARENT_ID,MOBILE,FAX) values (46,'فرع2',null,'kakdkas;l',null,to_date('18-APR-14','DD-MON-RR'),41,null,null);
Insert into ORCL.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,ADDRESS,PHONE,NOTES,ADDED_DATE,PARENT_ID,MOBILE,FAX) values (50,'فرع3','k;laskd;l','kdas;ld',';lk;asd',to_date('18-APR-14','DD-MON-RR'),41,'lk;lasdk;l','klkas;kd;');
Insert into ORCL.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,ADDRESS,PHONE,NOTES,ADDED_DATE,PARENT_ID,MOBILE,FAX) values (61,'فرع4','jhaskjdh',null,'hkashdas',to_date('11-MAY-14','DD-MON-RR'),41,null,null);
REM INSERTING into ORCL.ORDERED_SUPPLIES
SET DEFINE OFF;
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (401,41,12,50,to_date('08-MAY-14','DD-MON-RR'),'jlasd',123,'primary','2014/51','waiting',null,null,null,null,'readable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (402,4000,423,44,to_date('08-MAY-14','DD-MON-RR'),'asjdlas',123,'primary','2014/52','waiting','wqe','qwe','454','545','readable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (184,4000,300,50,to_date('25-FEB-14','DD-MON-RR'),'شيب',123,'primary','2014/28','accept',null,null,null,null,'readable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (181,1,100,61,to_date('24-FEB-14','DD-MON-RR'),'نميشس',123,'secondary','2014/26','accept',null,null,null,null,'readable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (182,1,200,44,to_date('24-FEB-14','DD-MON-RR'),'يتسنبيسب',123,'primary','2014/27','accept',null,null,null,null,'readable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (183,4000,100,1,to_date('24-FEB-14','DD-MON-RR'),'يبيس',123,'primary','2014/27','accept',null,null,null,null,'readable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (187,1,2,50,to_date('25-FEB-14','DD-MON-RR'),'نك',123,'primary','2014/30','accept',null,null,null,null,'readable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (165,41,45,61,to_date('22-FEB-14','DD-MON-RR'),'تاسنتشاينس',123,'secondary','2014/23','refuse',null,null,null,null,'readable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (166,341,777,2,to_date('22-FEB-14','DD-MON-RR'),'ةمشسنيك',123,'secondary','2014/23','accept',null,null,null,null,'readable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (167,41,78,2,to_date('22-FEB-14','DD-MON-RR'),'تمن',123,'primary','2014/24','waiting',null,null,null,null,'readable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (141,4000,4,44,to_date('18-FEB-14','DD-MON-RR'),null,123,'primary','2014/17','accept',null,null,null,null,'readable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (142,4000,8,1,to_date('18-FEB-14','DD-MON-RR'),null,123,'primary','2014/17','refuse',null,null,null,null,'readable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (101,341,1000,1,to_date('16-FEB-14','DD-MON-RR'),'طلبية مستعجلة',123,'primary','2014/5','accept',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (103,341,12,1,to_date('17-FEB-14','DD-MON-RR'),'اتيسبانيسب',123,'secondary','2014/7','refuse',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (81,344,15,46,to_date('16-FEB-14','DD-MON-RR'),'مستعجل!!',123,'secondary','2014/4','refuse',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (2,344,28,1,to_date('12-FEB-14','DD-MON-RR'),null,null,'primary','14-6','refuse',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (10,341,36,1,to_date('07-FEB-14','DD-MON-RR'),null,null,'primary','14-3','refuse',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (4,341,23,1,to_date('12-FEB-14','DD-MON-RR'),'lasjdl',1,'secondary','14-6','refuse',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (61,350,5,1,to_date('07-FEB-14','DD-MON-RR'),'aaaa',444,'primary','14-3','refuse',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (64,350,40,1,to_date('13-FEB-14','DD-MON-RR'),'ccccc',123,'primary','14-5','accept',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (123,1,10,1,to_date('17-FEB-14','DD-MON-RR'),'ثثثث',123,'primary','2014/9','accept',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (124,4000,5,1,to_date('17-FEB-14','DD-MON-RR'),'مممم',123,'primary','2014/9','accept',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (125,4000,6,1,to_date('17-FEB-14','DD-MON-RR'),'ششش',123,'primary','2014/10','accept',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (121,4000,10,1,to_date('17-FEB-14','DD-MON-RR'),'ششش',123,'primary','2014/8','waiting',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (143,341,444,1,to_date('19-FEB-14','DD-MON-RR'),null,123,'primary','2014/18','waiting',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (138,341,64,1,to_date('17-FEB-14','DD-MON-RR'),'4564',123,'primary','2014/15','refuse',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (162,348,10,2,to_date('21-FEB-14','DD-MON-RR'),'تنمشسي',123,'secondary','2014/20','refuse',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (163,348,2,2,to_date('21-FEB-14','DD-MON-RR'),'انيتشمسني',123,'secondary','2014/21','waiting',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (164,348,10,2,to_date('21-FEB-14','DD-MON-RR'),'تمشسي',123,'primary','2014/22','refuse',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (168,341,12,2,to_date('22-FEB-14','DD-MON-RR'),'تينمشستي',123,'primary','2014/25','waiting',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (185,1,5,50,to_date('25-FEB-14','DD-MON-RR'),null,123,'primary','2014/29','accept',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (186,1,10,1,to_date('25-FEB-14','DD-MON-RR'),'تا',123,'primary','2014/29','accept',null,null,null,null,'readable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (285,81,2,44,to_date('07-APR-14','DD-MON-RR'),'ىشسنميتشسي',123,'primary','2014/39','waiting','دائرة المبيعات','حازم الغلاييني','123456','101','readable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (321,350,10,1,to_date('09-APR-14','DD-MON-RR'),'تنمتم',123,'primary','2014/41','waiting',null,null,null,null,'readable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (322,348,10,2,to_date('09-APR-14','DD-MON-RR'),null,123,'primary','2014/41','waiting',null,null,null,null,'readable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (323,341,1,1,to_date('09-APR-14','DD-MON-RR'),null,123,'primary','2014/41','waiting',null,null,null,null,'readable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (324,4000,2,2,to_date('09-APR-14','DD-MON-RR'),'تاتنانت',123,'primary','2014/42','waiting',null,'حازم','121213','101','readable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (362,348,12,1,to_date('21-APR-14','DD-MON-RR'),'note1',123,'primary','2014/46','accept',null,null,null,null,'readable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (363,344,455,1,to_date('21-APR-14','DD-MON-RR'),'notes2',123,'secondary','2014/46','waiting',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (343,4000,100,1,to_date('18-APR-14','DD-MON-RR'),'asjkdjlkas',123,'primary','2014/44','accept','hardware','hazim','123456789','p123','readable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (361,null,null,1,to_date('21-APR-14','DD-MON-RR'),null,123,null,'2014/45','waiting',null,null,null,null,'readable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (364,4000,12,50,to_date('21-APR-14','DD-MON-RR'),'kjaslkd',123,'primary','2014/47','waiting','msadh','hazim','123456798','101','readable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (341,344,55,1,to_date('18-APR-14','DD-MON-RR'),'asldkjasd',123,'secondary','2014/43','refuse',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (301,1,null,2,to_date('08-APR-14','DD-MON-RR'),null,123,'primary','2014/40','waiting',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (342,121,77,1,to_date('18-APR-14','DD-MON-RR'),'asdasd',123,'secondary','2014/43','refuse',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (381,4000,1,3,to_date('05-MAY-14','DD-MON-RR'),'jsjdklasd',123,'primary','2014/48','waiting','jhjk','hazim','12132132','101','unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (281,81,1212,2,to_date('03-APR-14','DD-MON-RR'),'ملاحظة',123,'secondary','2014/37','waiting',null,null,null,null,'unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (282,81,1212,2,to_date('03-APR-14','DD-MON-RR'),'ملاحظة',123,'secondary','2014/37','waiting','2014/37','2014/37','2014/37','2014/37','unreadable');
Insert into ORCL.ORDERED_SUPPLIES (ORDER_ID,PRODUCT_ID,QUANTITY,DEPARTMENT_ID,ADDED_DATE,NOTES,APPLICANT_ID,UNIT_TYPE,ORDER_NUMBER,STATUS,SECTION_NAME,EMPLOYEE_NAME,EMPLOYEE_NUMBER,ROOM_NUMBER,NOTIFY_STATUS) values (283,4000,32,50,to_date('03-APR-14','DD-MON-RR'),'hjhsadh jshdjah hasjdhkjd jhaksd',123,'primary','2014/38','waiting','sadjhasjdhkasjhdh','kasjdlj','123456798','j5646as','unreadable');
REM INSERTING into ORCL.PRODUCTS
SET DEFINE OFF;
Insert into ORCL.PRODUCTS (PRODUCT_ID,PRODUCT_NAME,PRODUCT_NUMBER,PRODUCT_TYPE,NOTES,CATEGORY_ID,WIDTH,HEIGHT,H_LENGTH,RE_DEMAND_BORDER,PRIMARY_UNIT_NAME,SECONDARY_UNIT_NAME,PRIMARY_UNIT_QUANTITY,SECONDARY_UNIT_QUANTITY,QUANTITY_STATUS) values (81,'هاتف','1114','2','asjkldjasld',83,'10','10','10',10,'عدد','كرتونة',-78,34,'invisible');
Insert into ORCL.PRODUCTS (PRODUCT_ID,PRODUCT_NAME,PRODUCT_NUMBER,PRODUCT_TYPE,NOTES,CATEGORY_ID,WIDTH,HEIGHT,H_LENGTH,RE_DEMAND_BORDER,PRIMARY_UNIT_NAME,SECONDARY_UNIT_NAME,PRIMARY_UNIT_QUANTITY,SECONDARY_UNIT_QUANTITY,QUANTITY_STATUS) values (141,'jaslkdj','54','1','jhasdkas',43,'45','545','54',20,'sdjasd','jskd',5000,3,null);
Insert into ORCL.PRODUCTS (PRODUCT_ID,PRODUCT_NAME,PRODUCT_NUMBER,PRODUCT_TYPE,NOTES,CATEGORY_ID,WIDTH,HEIGHT,H_LENGTH,RE_DEMAND_BORDER,PRIMARY_UNIT_NAME,SECONDARY_UNIT_NAME,PRIMARY_UNIT_QUANTITY,SECONDARY_UNIT_QUANTITY,QUANTITY_STATUS) values (41,'اقلام','#1087','1','يشستياشس',41,'50','50','50',100,'عدد','باكو',2697,141,'invisible');
Insert into ORCL.PRODUCTS (PRODUCT_ID,PRODUCT_NAME,PRODUCT_NUMBER,PRODUCT_TYPE,NOTES,CATEGORY_ID,WIDTH,HEIGHT,H_LENGTH,RE_DEMAND_BORDER,PRIMARY_UNIT_NAME,SECONDARY_UNIT_NAME,PRIMARY_UNIT_QUANTITY,SECONDARY_UNIT_QUANTITY,QUANTITY_STATUS) values (4000,'جهاز حاسوب','4568','2','dasd',1,'645','5','45',45,'رطل','كيلو',98,530,'invisible');
Insert into ORCL.PRODUCTS (PRODUCT_ID,PRODUCT_NAME,PRODUCT_NUMBER,PRODUCT_TYPE,NOTES,CATEGORY_ID,WIDTH,HEIGHT,H_LENGTH,RE_DEMAND_BORDER,PRIMARY_UNIT_NAME,SECONDARY_UNIT_NAME,PRIMARY_UNIT_QUANTITY,SECONDARY_UNIT_QUANTITY,QUANTITY_STATUS) values (1,'سماعة حاسوب','747','2','dasd',41,'645','5','45',45,'asdasd','ggg',5048,518,'visible');
Insert into ORCL.PRODUCTS (PRODUCT_ID,PRODUCT_NAME,PRODUCT_NUMBER,PRODUCT_TYPE,NOTES,CATEGORY_ID,WIDTH,HEIGHT,H_LENGTH,RE_DEMAND_BORDER,PRIMARY_UNIT_NAME,SECONDARY_UNIT_NAME,PRIMARY_UNIT_QUANTITY,SECONDARY_UNIT_QUANTITY,QUANTITY_STATUS) values (350,'دباسة','#51','1','سشينمتشس',42,'50','50','50',600,'عدد','كرتونة',116579,200,'visible');
Insert into ORCL.PRODUCTS (PRODUCT_ID,PRODUCT_NAME,PRODUCT_NUMBER,PRODUCT_TYPE,NOTES,CATEGORY_ID,WIDTH,HEIGHT,H_LENGTH,RE_DEMAND_BORDER,PRIMARY_UNIT_NAME,SECONDARY_UNIT_NAME,PRIMARY_UNIT_QUANTITY,SECONDARY_UNIT_QUANTITY,QUANTITY_STATUS) values (344,'لاصق','#502','1','سشينمتشس',43,'50','50','60',600,'عدد','كرتونة',102707,200,'visible');
Insert into ORCL.PRODUCTS (PRODUCT_ID,PRODUCT_NAME,PRODUCT_NUMBER,PRODUCT_TYPE,NOTES,CATEGORY_ID,WIDTH,HEIGHT,H_LENGTH,RE_DEMAND_BORDER,PRIMARY_UNIT_NAME,SECONDARY_UNIT_NAME,PRIMARY_UNIT_QUANTITY,SECONDARY_UNIT_QUANTITY,QUANTITY_STATUS) values (348,'اقلام جاف','#50','1','سشينمتشس',44,'50','50','50',600,'عدد','كرتونة',510,4442,'visible');
Insert into ORCL.PRODUCTS (PRODUCT_ID,PRODUCT_NAME,PRODUCT_NUMBER,PRODUCT_TYPE,NOTES,CATEGORY_ID,WIDTH,HEIGHT,H_LENGTH,RE_DEMAND_BORDER,PRIMARY_UNIT_NAME,SECONDARY_UNIT_NAME,PRIMARY_UNIT_QUANTITY,SECONDARY_UNIT_QUANTITY,QUANTITY_STATUS) values (341,'ورق أبيض','#508','1','سشينمتشس',null,'50','50','50',600,'عدد','كرتونة',1316,500,'visible');
Insert into ORCL.PRODUCTS (PRODUCT_ID,PRODUCT_NAME,PRODUCT_NUMBER,PRODUCT_TYPE,NOTES,CATEGORY_ID,WIDTH,HEIGHT,H_LENGTH,RE_DEMAND_BORDER,PRIMARY_UNIT_NAME,SECONDARY_UNIT_NAME,PRIMARY_UNIT_QUANTITY,SECONDARY_UNIT_QUANTITY,QUANTITY_STATUS) values (121,'سكر','1012','1','سكر',41,null,null,null,50,'كيلو','رطل',9,3,'visible');
Insert into ORCL.PRODUCTS (PRODUCT_ID,PRODUCT_NAME,PRODUCT_NUMBER,PRODUCT_TYPE,NOTES,CATEGORY_ID,WIDTH,HEIGHT,H_LENGTH,RE_DEMAND_BORDER,PRIMARY_UNIT_NAME,SECONDARY_UNIT_NAME,PRIMARY_UNIT_QUANTITY,SECONDARY_UNIT_QUANTITY,QUANTITY_STATUS) values (176,'ssssssssss','110.0.181','1','sadas',110,null,null,null,5454,'sdsad','asd',100,null,'invisible');
Insert into ORCL.PRODUCTS (PRODUCT_ID,PRODUCT_NAME,PRODUCT_NUMBER,PRODUCT_TYPE,NOTES,CATEGORY_ID,WIDTH,HEIGHT,H_LENGTH,RE_DEMAND_BORDER,PRIMARY_UNIT_NAME,SECONDARY_UNIT_NAME,PRIMARY_UNIT_QUANTITY,SECONDARY_UNIT_QUANTITY,QUANTITY_STATUS) values (181,'تجريب','1021','1','ملاحظاتت',41,'20','30','10',5000,'عدد','كرتونة',100,10,'visible');
Insert into ORCL.PRODUCTS (PRODUCT_ID,PRODUCT_NAME,PRODUCT_NUMBER,PRODUCT_TYPE,NOTES,CATEGORY_ID,WIDTH,HEIGHT,H_LENGTH,RE_DEMAND_BORDER,PRIMARY_UNIT_NAME,SECONDARY_UNIT_NAME,PRIMARY_UNIT_QUANTITY,SECONDARY_UNIT_QUANTITY,QUANTITY_STATUS) values (185,'sad','321','1',null,110,null,null,null,null,null,null,null,null,null);
Insert into ORCL.PRODUCTS (PRODUCT_ID,PRODUCT_NAME,PRODUCT_NUMBER,PRODUCT_TYPE,NOTES,CATEGORY_ID,WIDTH,HEIGHT,H_LENGTH,RE_DEMAND_BORDER,PRIMARY_UNIT_NAME,SECONDARY_UNIT_NAME,PRIMARY_UNIT_QUANTITY,SECONDARY_UNIT_QUANTITY,QUANTITY_STATUS) values (186,'hjadkjaskj','324234','2',null,null,'11111111111111111111',null,null,null,null,null,null,null,'visible');
Insert into ORCL.PRODUCTS (PRODUCT_ID,PRODUCT_NAME,PRODUCT_NUMBER,PRODUCT_TYPE,NOTES,CATEGORY_ID,WIDTH,HEIGHT,H_LENGTH,RE_DEMAND_BORDER,PRIMARY_UNIT_NAME,SECONDARY_UNIT_NAME,PRIMARY_UNIT_QUANTITY,SECONDARY_UNIT_QUANTITY,QUANTITY_STATUS) values (187,'hasdkj','564',null,null,null,null,null,null,null,null,null,null,null,'visible');
Insert into ORCL.PRODUCTS (PRODUCT_ID,PRODUCT_NAME,PRODUCT_NUMBER,PRODUCT_TYPE,NOTES,CATEGORY_ID,WIDTH,HEIGHT,H_LENGTH,RE_DEMAND_BORDER,PRIMARY_UNIT_NAME,SECONDARY_UNIT_NAME,PRIMARY_UNIT_QUANTITY,SECONDARY_UNIT_QUANTITY,QUANTITY_STATUS) values (188,'ahsdkjh','3243',null,null,null,null,null,null,null,null,null,null,null,'visible');
Insert into ORCL.PRODUCTS (PRODUCT_ID,PRODUCT_NAME,PRODUCT_NUMBER,PRODUCT_TYPE,NOTES,CATEGORY_ID,WIDTH,HEIGHT,H_LENGTH,RE_DEMAND_BORDER,PRIMARY_UNIT_NAME,SECONDARY_UNIT_NAME,PRIMARY_UNIT_QUANTITY,SECONDARY_UNIT_QUANTITY,QUANTITY_STATUS) values (233,'hasdjhadsjh','3432',null,null,null,null,null,null,null,null,null,null,null,'visible');
REM INSERTING into ORCL.SERVICES
SET DEFINE OFF;
Insert into ORCL.SERVICES (SERVICE_ID,SERVICE_NAME,SERVICE_COST,BILLING_ID,ADDED_DATE,CURRENCY_TYPE,NOTES,PROVIDED_BY,RECEIVED_DATE,INSERT_NUMBER,QUANTITY) values (141,'dsjfklsjd','55',null,to_date('20-APR-14','DD-MON-RR'),null,'5asdas',null,null,'2014/341',null);
Insert into ORCL.SERVICES (SERVICE_ID,SERVICE_NAME,SERVICE_COST,BILLING_ID,ADDED_DATE,CURRENCY_TYPE,NOTES,PROVIDED_BY,RECEIVED_DATE,INSERT_NUMBER,QUANTITY) values (142,'jaskjd','45454',null,to_date('20-APR-14','DD-MON-RR'),null,'asdhsjld',null,null,'2014/341',null);
Insert into ORCL.SERVICES (SERVICE_ID,SERVICE_NAME,SERVICE_COST,BILLING_ID,ADDED_DATE,CURRENCY_TYPE,NOTES,PROVIDED_BY,RECEIVED_DATE,INSERT_NUMBER,QUANTITY) values (143,'hazim asjkldjals','456',null,to_date('20-APR-14','DD-MON-RR'),null,'46sdasdhkjasd',null,null,'2014/341',455);
Insert into ORCL.SERVICES (SERVICE_ID,SERVICE_NAME,SERVICE_COST,BILLING_ID,ADDED_DATE,CURRENCY_TYPE,NOTES,PROVIDED_BY,RECEIVED_DATE,INSERT_NUMBER,QUANTITY) values (121,'hhhhh','20','104',to_date('09-APR-14','DD-MON-RR'),null,'dhajshdkjhasdjhk',1,null,null,null);
Insert into ORCL.SERVICES (SERVICE_ID,SERVICE_NAME,SERVICE_COST,BILLING_ID,ADDED_DATE,CURRENCY_TYPE,NOTES,PROVIDED_BY,RECEIVED_DATE,INSERT_NUMBER,QUANTITY) values (122,'jjjjj','40','104',to_date('09-APR-14','DD-MON-RR'),null,'jjjjjjasdasdjahskjd',1,null,null,null);
Insert into ORCL.SERVICES (SERVICE_ID,SERVICE_NAME,SERVICE_COST,BILLING_ID,ADDED_DATE,CURRENCY_TYPE,NOTES,PROVIDED_BY,RECEIVED_DATE,INSERT_NUMBER,QUANTITY) values (123,'gggggg','10','1055',to_date('09-APR-14','DD-MON-RR'),null,'dshgasjdg',1,'2014/04/10','2014/321',null);
Insert into ORCL.SERVICES (SERVICE_ID,SERVICE_NAME,SERVICE_COST,BILLING_ID,ADDED_DATE,CURRENCY_TYPE,NOTES,PROVIDED_BY,RECEIVED_DATE,INSERT_NUMBER,QUANTITY) values (124,'jjjjjjjjjjjjjjj','44','1055',to_date('09-APR-14','DD-MON-RR'),null,'hskjadkh',1,'2014/04/10','2014/321',null);
Insert into ORCL.SERVICES (SERVICE_ID,SERVICE_NAME,SERVICE_COST,BILLING_ID,ADDED_DATE,CURRENCY_TYPE,NOTES,PROVIDED_BY,RECEIVED_DATE,INSERT_NUMBER,QUANTITY) values (40,'صيانة حاسوب','546','456',to_date('25-MAR-14','DD-MON-RR'),'أغورة','adasd',1,null,null,null);
Insert into ORCL.SERVICES (SERVICE_ID,SERVICE_NAME,SERVICE_COST,BILLING_ID,ADDED_DATE,CURRENCY_TYPE,NOTES,PROVIDED_BY,RECEIVED_DATE,INSERT_NUMBER,QUANTITY) values (41,'صيانة حاسوب','123',null,to_date('25-MAR-14','DD-MON-RR'),'شيكل','123',1,null,null,null);
Insert into ORCL.SERVICES (SERVICE_ID,SERVICE_NAME,SERVICE_COST,BILLING_ID,ADDED_DATE,CURRENCY_TYPE,NOTES,PROVIDED_BY,RECEIVED_DATE,INSERT_NUMBER,QUANTITY) values (42,'صيانة ماكنة طباعة','123',null,to_date('25-MAR-14','DD-MON-RR'),'شيكل','123',2,null,null,null);
Insert into ORCL.SERVICES (SERVICE_ID,SERVICE_NAME,SERVICE_COST,BILLING_ID,ADDED_DATE,CURRENCY_TYPE,NOTES,PROVIDED_BY,RECEIVED_DATE,INSERT_NUMBER,QUANTITY) values (115,'اصلاح هاتف','11111','1111',to_date('26-MAR-14','DD-MON-RR'),null,'11122',1,null,null,null);
Insert into ORCL.SERVICES (SERVICE_ID,SERVICE_NAME,SERVICE_COST,BILLING_ID,ADDED_DATE,CURRENCY_TYPE,NOTES,PROVIDED_BY,RECEIVED_DATE,INSERT_NUMBER,QUANTITY) values (113,'اصلاح هاتف','11111','1111',to_date('26-MAR-14','DD-MON-RR'),null,'11122',1,null,null,null);
Insert into ORCL.SERVICES (SERVICE_ID,SERVICE_NAME,SERVICE_COST,BILLING_ID,ADDED_DATE,CURRENCY_TYPE,NOTES,PROVIDED_BY,RECEIVED_DATE,INSERT_NUMBER,QUANTITY) values (114,'اصلاح هاتف','22222','22222',to_date('26-MAR-14','DD-MON-RR'),null,'2222',2,null,null,null);
Insert into ORCL.SERVICES (SERVICE_ID,SERVICE_NAME,SERVICE_COST,BILLING_ID,ADDED_DATE,CURRENCY_TYPE,NOTES,PROVIDED_BY,RECEIVED_DATE,INSERT_NUMBER,QUANTITY) values (116,'اصلاح صنف','22222','22222',to_date('26-MAR-14','DD-MON-RR'),null,'2222',2,null,null,null);
Insert into ORCL.SERVICES (SERVICE_ID,SERVICE_NAME,SERVICE_COST,BILLING_ID,ADDED_DATE,CURRENCY_TYPE,NOTES,PROVIDED_BY,RECEIVED_DATE,INSERT_NUMBER,QUANTITY) values (117,'اجرة عامل','12',null,to_date('28-MAR-14','DD-MON-RR'),'أغورة','sadkjlasd',1,null,null,null);
Insert into ORCL.SERVICES (SERVICE_ID,SERVICE_NAME,SERVICE_COST,BILLING_ID,ADDED_DATE,CURRENCY_TYPE,NOTES,PROVIDED_BY,RECEIVED_DATE,INSERT_NUMBER,QUANTITY) values (118,'اجرة مواصلات','13',null,to_date('28-MAR-14','DD-MON-RR'),'دولار','sad',1,null,null,null);
Insert into ORCL.SERVICES (SERVICE_ID,SERVICE_NAME,SERVICE_COST,BILLING_ID,ADDED_DATE,CURRENCY_TYPE,NOTES,PROVIDED_BY,RECEIVED_DATE,INSERT_NUMBER,QUANTITY) values (119,'صيانة ماكنة طباعة','123',null,to_date('28-MAR-14','DD-MON-RR'),null,'123',1,null,null,null);
Insert into ORCL.SERVICES (SERVICE_ID,SERVICE_NAME,SERVICE_COST,BILLING_ID,ADDED_DATE,CURRENCY_TYPE,NOTES,PROVIDED_BY,RECEIVED_DATE,INSERT_NUMBER,QUANTITY) values (200,'1','1','1',to_date('01-JUN-14','DD-MON-RR'),null,null,41,'2014/06/01','2014/99',1);
Insert into ORCL.SERVICES (SERVICE_ID,SERVICE_NAME,SERVICE_COST,BILLING_ID,ADDED_DATE,CURRENCY_TYPE,NOTES,PROVIDED_BY,RECEIVED_DATE,INSERT_NUMBER,QUANTITY) values (201,'2','4','1',to_date('01-JUN-14','DD-MON-RR'),null,null,41,'2014/06/01','2014/99',2);
REM INSERTING into ORCL.STATIC_PRODUCT
SET DEFINE OFF;
Insert into ORCL.STATIC_PRODUCT (VOUCHER_ID,PRODUCT_STATUS,PRODUCT_NATURE,SUPPLY_TYPE,EXPIRE_DATE,SERIAL_NUMBER,RESERVE_STATUS) values (385,'مستخدمة جيدة','مستأجرة','مؤقتة',null,'eqwe','محجوز');
Insert into ORCL.STATIC_PRODUCT (VOUCHER_ID,PRODUCT_STATUS,PRODUCT_NATURE,SUPPLY_TYPE,EXPIRE_DATE,SERIAL_NUMBER,RESERVE_STATUS) values (382,'مستخدمة جيدة','مستأجرة','مؤقتة','2014/06/06','456','متاح');
Insert into ORCL.STATIC_PRODUCT (VOUCHER_ID,PRODUCT_STATUS,PRODUCT_NATURE,SUPPLY_TYPE,EXPIRE_DATE,SERIAL_NUMBER,RESERVE_STATUS) values (384,'مستخدمة جيدة','مستأجرة','مؤقتة','2014/05/31','45646','متاح');
Insert into ORCL.STATIC_PRODUCT (VOUCHER_ID,PRODUCT_STATUS,PRODUCT_NATURE,SUPPLY_TYPE,EXPIRE_DATE,SERIAL_NUMBER,RESERVE_STATUS) values (386,'مستخدمة جيدة','مستأجرة','مؤقتة',null,'sad445','محجوز');
Insert into ORCL.STATIC_PRODUCT (VOUCHER_ID,PRODUCT_STATUS,PRODUCT_NATURE,SUPPLY_TYPE,EXPIRE_DATE,SERIAL_NUMBER,RESERVE_STATUS) values (223,'تالفه','مستأجرة','مؤقتة','2014/03/04','454asdd','تم إتلافة');
Insert into ORCL.STATIC_PRODUCT (VOUCHER_ID,PRODUCT_STATUS,PRODUCT_NATURE,SUPPLY_TYPE,EXPIRE_DATE,SERIAL_NUMBER,RESERVE_STATUS) values (222,'تالفه','مستأجرة','مؤقتة','2014/05/03','454as','محجوز');
Insert into ORCL.STATIC_PRODUCT (VOUCHER_ID,PRODUCT_STATUS,PRODUCT_NATURE,SUPPLY_TYPE,EXPIRE_DATE,SERIAL_NUMBER,RESERVE_STATUS) values (261,'مستخدمة جيدة','مستأجرة','دائمة','2014/04/25','56554546546','محجوز');
Insert into ORCL.STATIC_PRODUCT (VOUCHER_ID,PRODUCT_STATUS,PRODUCT_NATURE,SUPPLY_TYPE,EXPIRE_DATE,SERIAL_NUMBER,RESERVE_STATUS) values (344,'جديدة','مشتراه','دائمة','2014/04/17','45454654656','متاح');
Insert into ORCL.STATIC_PRODUCT (VOUCHER_ID,PRODUCT_STATUS,PRODUCT_NATURE,SUPPLY_TYPE,EXPIRE_DATE,SERIAL_NUMBER,RESERVE_STATUS) values (219,'جديدة','مستأجرة','مؤقتة','2014/03/06','12313','إخراج مؤقت');
Insert into ORCL.STATIC_PRODUCT (VOUCHER_ID,PRODUCT_STATUS,PRODUCT_NATURE,SUPPLY_TYPE,EXPIRE_DATE,SERIAL_NUMBER,RESERVE_STATUS) values (570,'جديدة','مستأجرة','مؤقتة','2014/06/02','1215464','محجوز');
Insert into ORCL.STATIC_PRODUCT (VOUCHER_ID,PRODUCT_STATUS,PRODUCT_NATURE,SUPPLY_TYPE,EXPIRE_DATE,SERIAL_NUMBER,RESERVE_STATUS) values (572,'جديدة','مستأجرة','مؤقتة','2014/06/02','1254515464','محجوز');
Insert into ORCL.STATIC_PRODUCT (VOUCHER_ID,PRODUCT_STATUS,PRODUCT_NATURE,SUPPLY_TYPE,EXPIRE_DATE,SERIAL_NUMBER,RESERVE_STATUS) values (573,'جديدة','مستأجرة','مؤقتة','2014/06/02','5451254515464','متاح');
Insert into ORCL.STATIC_PRODUCT (VOUCHER_ID,PRODUCT_STATUS,PRODUCT_NATURE,SUPPLY_TYPE,EXPIRE_DATE,SERIAL_NUMBER,RESERVE_STATUS) values (574,'جديدة','مستأجرة','مؤقتة','2014/06/02','545127854515464','متاح');
Insert into ORCL.STATIC_PRODUCT (VOUCHER_ID,PRODUCT_STATUS,PRODUCT_NATURE,SUPPLY_TYPE,EXPIRE_DATE,SERIAL_NUMBER,RESERVE_STATUS) values (575,'جديدة','مستأجرة','مؤقتة','2014/06/02','878','متاح');
REM INSERTING into ORCL.SUPPLIES_CORRUPTED
SET DEFINE OFF;
Insert into ORCL.SUPPLIES_CORRUPTED (ORDER_ID,INSERT_VOUCHER_ID,MONITOR_WAYS,CORRUPTED_DATE,DAMAGE_MEMBERS) values (5,222,'kasjdklj,jaskdjasl,kjkjlkasjdasd,',to_date('19-APR-14','DD-MON-RR'),1);
Insert into ORCL.SUPPLIES_CORRUPTED (ORDER_ID,INSERT_VOUCHER_ID,MONITOR_WAYS,CORRUPTED_DATE,DAMAGE_MEMBERS) values (6,223,'kasjdklj,jaskdjasl,kjkjlkasjdasd,',to_date('19-APR-14','DD-MON-RR'),1);
Insert into ORCL.SUPPLIES_CORRUPTED (ORDER_ID,INSERT_VOUCHER_ID,MONITOR_WAYS,CORRUPTED_DATE,DAMAGE_MEMBERS) values (7,223,'asdkjsadk,ksjaldkas,kjklasdsd,',to_date('20-APR-14','DD-MON-RR'),1);
Insert into ORCL.SUPPLIES_CORRUPTED (ORDER_ID,INSERT_VOUCHER_ID,MONITOR_WAYS,CORRUPTED_DATE,DAMAGE_MEMBERS) values (8,223,'asdkjsadk,ksjaldkas,kjklasdsd,',to_date('20-APR-14','DD-MON-RR'),1);
REM INSERTING into ORCL.TEMPORARY_OUTPUT
SET DEFINE OFF;
Insert into ORCL.TEMPORARY_OUTPUT (ORDER_ID,INSERT_VOUCHER_ID,REASONS,COMPANY_ID,ADDED_DATE,ORDER_STATUS) values (7,344,'jaskldjksjadl,jaskldjlasd,',2,to_date('27-APR-14','DD-MON-RR'),'end');
Insert into ORCL.TEMPORARY_OUTPUT (ORDER_ID,INSERT_VOUCHER_ID,REASONS,COMPANY_ID,ADDED_DATE,ORDER_STATUS) values (21,219,'للصيانة,للصيانة,',1,to_date('03-JUN-14','DD-MON-RR'),'wait');
REM INSERTING into ORCL.USERS
SET DEFINE OFF;
Insert into ORCL.USERS (USER_ID,FIRST_NAME,MIDDLE_NAME,LAST_NAME,EMPLOYEE_NUMBER,PHONE_NUMBER,EMAIL,USERNAME,USER_PASSWORD,USER_ROLE,REGISTEREDDATE,LASTLOGGENINDATE,ACCOUNT_STATUS,USER_PICTURE,MOBILE_NUMBER,DEPARTMENT_ID) values (1,'محمود','محمد','أبو دقة',111111,'28144444444','hazim.alghalayi@hotmail.com','role3','21232f297a57a5a743894a0e4a801fc3',3,to_date('10-MAY-14','DD-MON-RR'),to_timestamp('31-MAY-14 06.40.16.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),'active','7effbb2251d42a344258ec73d2d76d16.jpg','059999999999999',46);
Insert into ORCL.USERS (USER_ID,FIRST_NAME,MIDDLE_NAME,LAST_NAME,EMPLOYEE_NUMBER,PHONE_NUMBER,EMAIL,USERNAME,USER_PASSWORD,USER_ROLE,REGISTEREDDATE,LASTLOGGENINDATE,ACCOUNT_STATUS,USER_PICTURE,MOBILE_NUMBER,DEPARTMENT_ID) values (2,'أحمد','أحمد','الأغا',1321,'6765675','hazim.alghalayidni@hotmail','role2','21232f297a57a5a743894a0e4a801fc3',2,to_date('10-MAY-14','DD-MON-RR'),to_timestamp('14-MAY-14 03.19.27.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),'active','f45663fc2704e0bbf8a5266780b0dd84.jpg','56757',44);
Insert into ORCL.USERS (USER_ID,FIRST_NAME,MIDDLE_NAME,LAST_NAME,EMPLOYEE_NUMBER,PHONE_NUMBER,EMAIL,USERNAME,USER_PASSWORD,USER_ROLE,REGISTEREDDATE,LASTLOGGENINDATE,ACCOUNT_STATUS,USER_PICTURE,MOBILE_NUMBER,DEPARTMENT_ID) values (3,'حازم','أسامة','الغلاييني',5446,'445456','hazim.alghalayidnsi@hotmail','role1','21232f297a57a5a743894a0e4a801fc3',1,to_date('10-MAY-14','DD-MON-RR'),to_timestamp('03-JUN-14 09.26.43.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),'active','f45663fc2704e0bbf8a5266780b0dd84.jpg','56757',50);
Insert into ORCL.USERS (USER_ID,FIRST_NAME,MIDDLE_NAME,LAST_NAME,EMPLOYEE_NUMBER,PHONE_NUMBER,EMAIL,USERNAME,USER_PASSWORD,USER_ROLE,REGISTEREDDATE,LASTLOGGENINDATE,ACCOUNT_STATUS,USER_PICTURE,MOBILE_NUMBER,DEPARTMENT_ID) values (4,'عاصم','سليم','العلمي',45645456,'6765675','hazim.alghalaydidnsi@hotmail','role4','21232f297a57a5a743894a0e4a801fc3',4,to_date('10-MAY-14','DD-MON-RR'),to_timestamp('14-MAY-14 03.18.39.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),'active','f45663fc2704e0bbf8a5266780b0dd84.jpg','56757',61);
REM INSERTING into ORCL.USERS_ROLES
SET DEFINE OFF;
Insert into ORCL.USERS_ROLES (ROLE_ID,ROLE_NAME) values (1,'مدير المخازن');
Insert into ORCL.USERS_ROLES (ROLE_ID,ROLE_NAME) values (2,'مدير عام المخازن');
Insert into ORCL.USERS_ROLES (ROLE_ID,ROLE_NAME) values (3,'مدير دائرة');
Insert into ORCL.USERS_ROLES (ROLE_ID,ROLE_NAME) values (4,'مدير شؤون الموظفين');
REM INSERTING into ORCL.VOUCHER_INSERT
SET DEFINE OFF;
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (384,4000,1,null,to_date('08-MAY-14','DD-MON-RR'),'سشتيمشسي',123,10,1,'أغورة','primary',null,null);
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (382,4000,1,'54',to_date('08-MAY-14','DD-MON-RR'),'jdak;sdas',123,null,112,'يورو','primary',null,null);
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (383,41,41,'54',to_date('08-MAY-14','DD-MON-RR'),'سيشسي',123,12,1,'دولار','secondary','2014/05/27','2014/52');
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (385,4000,41,null,to_date('08-MAY-14','DD-MON-RR'),null,123,null,null,null,'primary',null,null);
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (386,4000,41,null,to_date('08-MAY-14','DD-MON-RR'),null,123,null,null,null,'primary',null,'2014/53');
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (222,4000,1,'456',to_date('30-MAR-14','DD-MON-RR'),'daskd;l',123,45,454,'دينار','primary',null,null);
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (223,4000,1,'456',to_date('30-MAR-14','DD-MON-RR'),'daskd;l',123,45,454,'دينار','primary',null,null);
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (321,344,41,'10254',to_date('20-APR-14','DD-MON-RR'),'hdaksdh',123,210,21,'أغورة','primary','2014/04/11','2014/321');
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (301,41,1,'104',to_date('09-APR-14','DD-MON-RR'),'nasdlkasjdlasd',123,10,1,'دولار','primary','2014/04/09','2014/301');
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (302,350,1,'104',to_date('09-APR-14','DD-MON-RR'),'nasdlkasjdlasd',123,3,2,'دولار','primary','2014/04/09','2014/301');
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (323,350,41,'5446',to_date('21-APR-14','DD-MON-RR'),null,123,45,545,'شيكل','primary','2014/04/24','2014/341');
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (324,41,2,'879',to_date('21-APR-14','DD-MON-RR'),'kjslkdjasd',123,200,45,'شيكل','primary','2014/05/09','2014/48');
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (331,1,41,'787',to_date('21-APR-14','DD-MON-RR'),'kljaskjdlas',123,4545,4,'دولار','primary','2014/05/03','2014/48');
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (261,81,1,'4546',to_date('08-APR-14','DD-MON-RR'),'سشتينمتشسيميتمسشي',123,1212,121,'دولار','secondary',null,null);
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (322,344,1,'1545',to_date('21-APR-14','DD-MON-RR'),'hjashdkasds',123,500,2,'دولار','secondary','2014/04/11','2014/341');
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (340,350,41,'7879',to_date('21-APR-14','DD-MON-RR'),'JSAKLDJAS',123,454,54,'شيكل','secondary','2014/05/02','2014/49');
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (342,350,1,'45',to_date('21-APR-14','DD-MON-RR'),'jalkds',123,54,454,'شيكل','primary','2014/04/18','2014/50');
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (343,344,41,'21',to_date('21-APR-14','DD-MON-RR'),'asjdl',123,12,12,'شيكل','secondary','2014/04/26','2014/51');
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (344,4000,1,'785',to_date('21-APR-14','DD-MON-RR'),'kjlkjlk',123,1,78,'شيكل','primary',null,null);
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (219,81,1,'123',to_date('28-MAR-14','DD-MON-RR'),'jkasjd',123,12,212,'شيكل','primary',null,null);
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (572,1,1,'123',to_date('02-JUN-14','DD-MON-RR'),'sdjklajsdasd',123,3,1,'شيكل','primary',null,'2014/99');
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (569,41,1,'33',to_date('01-JUN-14','DD-MON-RR'),'sadghasgdjas',123,5,5,'شيكل','secondary','2014/06/01','2014/98');
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (570,1,1,'123',to_date('02-JUN-14','DD-MON-RR'),'sdjklajsdasd',123,3,1,'شيكل','primary',null,'2014/99');
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (573,1,1,'123',to_date('02-JUN-14','DD-MON-RR'),'sdjklajsdasd',123,3,1,'شيكل','primary',null,'2014/99');
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (553,350,1,'1',to_date('01-JUN-14','DD-MON-RR'),'dddd',123,2,2,'دينار','secondary','2014/06/01','2014/95');
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (541,350,41,'121',to_date('01-JUN-14','DD-MON-RR'),'dddd',123,121,11,'دولار','secondary','2014/06/01','2014/94');
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (574,1,1,'123',to_date('02-JUN-14','DD-MON-RR'),'sdjklajsdasd',123,3,1,'شيكل','primary',null,'2014/99');
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (575,1,1,'123',to_date('02-JUN-14','DD-MON-RR'),'sdjklajsdasd',123,3,1,'شيكل','primary',null,'2014/99');
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (408,344,1,'101',to_date('30-MAY-14','DD-MON-RR'),'ksjdlkasd',123,10,2,'دينار','primary','2014/05/30','2014/55');
Insert into ORCL.VOUCHER_INSERT (VOUCHER_ID,PRODUCT_ID,RECEIVED_FROM,BILLING_ID,ADDED_DATE,NOTES,RECEIVER_ID,QUANTITY,UNIT_PRICE,CURRENCY_TYPE,UNIT_TYPE,RECEIVED_DATE,INSERT_NUMBER) values (409,348,1,'101',to_date('30-MAY-14','DD-MON-RR'),'ksjdlkasd',123,5,4,'دينار','primary','2014/05/30','2014/55');
REM INSERTING into ORCL.VOUCHER_OUTPUT
SET DEFINE OFF;
Insert into ORCL.VOUCHER_OUTPUT (VOUCHER_ID,UNIT_TYPE,QUANTITY_DISBURSED,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES) values (142,'primary',200,182,to_date('24-FEB-14','DD-MON-RR'),null);
Insert into ORCL.VOUCHER_OUTPUT (VOUCHER_ID,UNIT_TYPE,QUANTITY_DISBURSED,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES) values (143,'primary',50,183,to_date('24-FEB-14','DD-MON-RR'),null);
Insert into ORCL.VOUCHER_OUTPUT (VOUCHER_ID,UNIT_TYPE,QUANTITY_DISBURSED,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES) values (141,'secondary',100,181,to_date('24-FEB-14','DD-MON-RR'),null);
Insert into ORCL.VOUCHER_OUTPUT (VOUCHER_ID,UNIT_TYPE,QUANTITY_DISBURSED,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES) values (147,'primary',2,187,to_date('25-FEB-14','DD-MON-RR'),null);
Insert into ORCL.VOUCHER_OUTPUT (VOUCHER_ID,UNIT_TYPE,QUANTITY_DISBURSED,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES) values (146,'primary',10,186,to_date('25-FEB-14','DD-MON-RR'),null);
Insert into ORCL.VOUCHER_OUTPUT (VOUCHER_ID,UNIT_TYPE,QUANTITY_DISBURSED,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES) values (144,'primary',30,184,to_date('25-FEB-14','DD-MON-RR'),null);
Insert into ORCL.VOUCHER_OUTPUT (VOUCHER_ID,UNIT_TYPE,QUANTITY_DISBURSED,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES) values (145,'primary',5,185,to_date('25-FEB-14','DD-MON-RR'),null);
Insert into ORCL.VOUCHER_OUTPUT (VOUCHER_ID,UNIT_TYPE,QUANTITY_DISBURSED,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES) values (161,'primary',101,167,to_date('04-APR-14','DD-MON-RR'),'12313');
Insert into ORCL.VOUCHER_OUTPUT (VOUCHER_ID,UNIT_TYPE,QUANTITY_DISBURSED,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES) values (162,'secondary',10,181,to_date('04-APR-14','DD-MON-RR'),'20');
Insert into ORCL.VOUCHER_OUTPUT (VOUCHER_ID,UNIT_TYPE,QUANTITY_DISBURSED,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES) values (208,'primary',1,166,to_date('30-MAY-14','DD-MON-RR'),'asdjas');
Insert into ORCL.VOUCHER_OUTPUT (VOUCHER_ID,UNIT_TYPE,QUANTITY_DISBURSED,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES) values (232,'primary',12,166,to_date('02-JUN-14','DD-MON-RR'),'ييييييييييييييييييي');
Insert into ORCL.VOUCHER_OUTPUT (VOUCHER_ID,UNIT_TYPE,QUANTITY_DISBURSED,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES) values (221,'primary',1,362,to_date('02-JUN-14','DD-MON-RR'),'jslakjdas');
Insert into ORCL.VOUCHER_OUTPUT (VOUCHER_ID,UNIT_TYPE,QUANTITY_DISBURSED,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES) values (240,'primary',54,166,to_date('02-JUN-14','DD-MON-RR'),'45');
Insert into ORCL.VOUCHER_OUTPUT (VOUCHER_ID,UNIT_TYPE,QUANTITY_DISBURSED,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES) values (241,'primary',1,166,to_date('02-JUN-14','DD-MON-RR'),'dfdfdsf');
Insert into ORCL.VOUCHER_OUTPUT (VOUCHER_ID,UNIT_TYPE,QUANTITY_DISBURSED,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES) values (243,'primary',2,166,to_date('02-JUN-14','DD-MON-RR'),'sadjhkajsdh');
Insert into ORCL.VOUCHER_OUTPUT (VOUCHER_ID,UNIT_TYPE,QUANTITY_DISBURSED,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES) values (245,'primary',2,166,to_date('02-JUN-14','DD-MON-RR'),'sadjhkajsdh');
Insert into ORCL.VOUCHER_OUTPUT (VOUCHER_ID,UNIT_TYPE,QUANTITY_DISBURSED,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES) values (247,'primary',1,166,to_date('02-JUN-14','DD-MON-RR'),'asdhaskjdh');
Insert into ORCL.VOUCHER_OUTPUT (VOUCHER_ID,UNIT_TYPE,QUANTITY_DISBURSED,ORDER_SUPPLIES_ID,ADDED_DATE,NOTES) values (250,'primary',1,166,to_date('02-JUN-14','DD-MON-RR'),'1');
--------------------------------------------------------
--  DDL for Index CATEGORIES_UK_CATEGORY_NAME
--------------------------------------------------------

  CREATE UNIQUE INDEX "ORCL"."CATEGORIES_UK_CATEGORY_NAME" ON "ORCL"."CATEGORIES" ("CATEGORY_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SERVICES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "ORCL"."SERVICES_PK" ON "ORCL"."SERVICES" ("SERVICE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index COMPANIES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "ORCL"."COMPANIES_PK" ON "ORCL"."COMPANIES" ("COMPANY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SUPPLIES_CORRUPTED_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "ORCL"."SUPPLIES_CORRUPTED_PK" ON "ORCL"."SUPPLIES_CORRUPTED" ("ORDER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index STATIC_PRODUCT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "ORCL"."STATIC_PRODUCT_PK" ON "ORCL"."STATIC_PRODUCT" ("VOUCHER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index STATIC_PRODUCT_SERIAL
--------------------------------------------------------

  CREATE UNIQUE INDEX "ORCL"."STATIC_PRODUCT_SERIAL" ON "ORCL"."STATIC_PRODUCT" ("SERIAL_NUMBER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CATEGORIES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "ORCL"."CATEGORIES_PK" ON "ORCL"."CATEGORIES" ("CATEGORY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index BORROWING_VOUCHER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "ORCL"."BORROWING_VOUCHER_PK" ON "ORCL"."BORROWING_VOUCHER" ("VOUCHER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index USERS_UK_USERNAME
--------------------------------------------------------

  CREATE UNIQUE INDEX "ORCL"."USERS_UK_USERNAME" ON "ORCL"."USERS" ("USERNAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index ORDER_SUPPLIES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "ORCL"."ORDER_SUPPLIES_PK" ON "ORCL"."ORDERED_SUPPLIES" ("ORDER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index USERS_UK_EMAIL
--------------------------------------------------------

  CREATE UNIQUE INDEX "ORCL"."USERS_UK_EMAIL" ON "ORCL"."USERS" ("EMAIL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TEMPORARY_OUTPUT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "ORCL"."TEMPORARY_OUTPUT_PK" ON "ORCL"."TEMPORARY_OUTPUT" ("ORDER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index USERS_EMP_NUMBER
--------------------------------------------------------

  CREATE UNIQUE INDEX "ORCL"."USERS_EMP_NUMBER" ON "ORCL"."USERS" ("EMPLOYEE_NUMBER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index VOUCHER_INSERT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "ORCL"."VOUCHER_INSERT_PK" ON "ORCL"."VOUCHER_INSERT" ("VOUCHER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index DEPARTMENTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "ORCL"."DEPARTMENTS_PK" ON "ORCL"."DEPARTMENTS" ("DEPARTMENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PRODUCTS_UK_PRODUCT_NUMBER
--------------------------------------------------------

  CREATE UNIQUE INDEX "ORCL"."PRODUCTS_UK_PRODUCT_NUMBER" ON "ORCL"."PRODUCTS" ("PRODUCT_NUMBER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index USERS_ROLES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "ORCL"."USERS_ROLES_PK" ON "ORCL"."USERS_ROLES" ("ROLE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TABLE1_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "ORCL"."TABLE1_PK" ON "ORCL"."PRODUCTS" ("PRODUCT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index VOUCHER_OUTPUT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "ORCL"."VOUCHER_OUTPUT_PK" ON "ORCL"."VOUCHER_OUTPUT" ("VOUCHER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index USERS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "ORCL"."USERS_PK" ON "ORCL"."USERS" ("USER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  Constraints for Table ORDERED_SUPPLIES
--------------------------------------------------------

  ALTER TABLE "ORCL"."ORDERED_SUPPLIES" ADD CONSTRAINT "ORDER_SUPPLIES_PK" PRIMARY KEY ("ORDER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "ORCL"."ORDERED_SUPPLIES" MODIFY ("ORDER_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PRODUCTS
--------------------------------------------------------

  ALTER TABLE "ORCL"."PRODUCTS" ADD CONSTRAINT "PRODUCTS_PK" PRIMARY KEY ("PRODUCT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "ORCL"."PRODUCTS" ADD CONSTRAINT "PRODUCTS_UK_PRODUCT_NUMBER" UNIQUE ("PRODUCT_NUMBER")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "ORCL"."PRODUCTS" MODIFY ("PRODUCT_ID" NOT NULL ENABLE);
 
  ALTER TABLE "ORCL"."PRODUCTS" MODIFY ("PRODUCT_NUMBER" NOT NULL ENABLE);
 
  ALTER TABLE "ORCL"."PRODUCTS" MODIFY ("PRODUCT_NAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table DEPARTMENTS
--------------------------------------------------------

  ALTER TABLE "ORCL"."DEPARTMENTS" ADD CONSTRAINT "DEPARTMENTS_PK" PRIMARY KEY ("DEPARTMENT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "ORCL"."DEPARTMENTS" MODIFY ("DEPARTMENT_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VOUCHER_INSERT
--------------------------------------------------------

  ALTER TABLE "ORCL"."VOUCHER_INSERT" MODIFY ("VOUCHER_ID" NOT NULL ENABLE);
 
  ALTER TABLE "ORCL"."VOUCHER_INSERT" MODIFY ("PRODUCT_ID" NOT NULL ENABLE);
 
  ALTER TABLE "ORCL"."VOUCHER_INSERT" MODIFY ("ADDED_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "ORCL"."VOUCHER_INSERT" ADD CONSTRAINT "VOUCHER_INSERT_PK" PRIMARY KEY ("VOUCHER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table USERS_ROLES
--------------------------------------------------------

  ALTER TABLE "ORCL"."USERS_ROLES" MODIFY ("ROLE_ID" NOT NULL ENABLE);
 
  ALTER TABLE "ORCL"."USERS_ROLES" MODIFY ("ROLE_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "ORCL"."USERS_ROLES" ADD CONSTRAINT "USERS_ROLES_PK" PRIMARY KEY ("ROLE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TEMPORARY_OUTPUT
--------------------------------------------------------

  ALTER TABLE "ORCL"."TEMPORARY_OUTPUT" MODIFY ("ORDER_ID" NOT NULL ENABLE);
 
  ALTER TABLE "ORCL"."TEMPORARY_OUTPUT" MODIFY ("ORDER_STATUS" NOT NULL ENABLE);
 
  ALTER TABLE "ORCL"."TEMPORARY_OUTPUT" MODIFY ("INSERT_VOUCHER_ID" NOT NULL ENABLE);
 
  ALTER TABLE "ORCL"."TEMPORARY_OUTPUT" ADD CONSTRAINT "TEMPORARY_OUTPUT_PK" PRIMARY KEY ("ORDER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table VOUCHER_OUTPUT
--------------------------------------------------------

  ALTER TABLE "ORCL"."VOUCHER_OUTPUT" MODIFY ("VOUCHER_ID" NOT NULL ENABLE);
 
  ALTER TABLE "ORCL"."VOUCHER_OUTPUT" MODIFY ("UNIT_TYPE" NOT NULL ENABLE);
 
  ALTER TABLE "ORCL"."VOUCHER_OUTPUT" MODIFY ("QUANTITY_DISBURSED" NOT NULL ENABLE);
 
  ALTER TABLE "ORCL"."VOUCHER_OUTPUT" MODIFY ("ORDER_SUPPLIES_ID" NOT NULL ENABLE);
 
  ALTER TABLE "ORCL"."VOUCHER_OUTPUT" ADD CONSTRAINT "VOUCHER_OUTPUT_PK" PRIMARY KEY ("VOUCHER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table SUPPLIES_CORRUPTED
--------------------------------------------------------

  ALTER TABLE "ORCL"."SUPPLIES_CORRUPTED" ADD CONSTRAINT "SUPPLIES_CORRUPTED_PK" PRIMARY KEY ("ORDER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "ORCL"."SUPPLIES_CORRUPTED" MODIFY ("ORDER_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BORROWING_VOUCHER
--------------------------------------------------------

  ALTER TABLE "ORCL"."BORROWING_VOUCHER" ADD CONSTRAINT "BORROWING_VOUCHER_PK" PRIMARY KEY ("VOUCHER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "ORCL"."BORROWING_VOUCHER" MODIFY ("VOUCHER_ID" NOT NULL ENABLE);
 
  ALTER TABLE "ORCL"."BORROWING_VOUCHER" MODIFY ("ORDER_SUPPLIES_ID" NOT NULL ENABLE);
 
  ALTER TABLE "ORCL"."BORROWING_VOUCHER" MODIFY ("RETURN_DATE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table COMPANIES
--------------------------------------------------------

  ALTER TABLE "ORCL"."COMPANIES" ADD CONSTRAINT "COMPANIES_PK" PRIMARY KEY ("COMPANY_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "ORCL"."COMPANIES" MODIFY ("COMPANY_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SERVICES
--------------------------------------------------------

  ALTER TABLE "ORCL"."SERVICES" ADD CONSTRAINT "SERVICES_PK" PRIMARY KEY ("SERVICE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "ORCL"."SERVICES" MODIFY ("SERVICE_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CATEGORIES
--------------------------------------------------------

  ALTER TABLE "ORCL"."CATEGORIES" ADD CONSTRAINT "CATEGORIES_PK" PRIMARY KEY ("CATEGORY_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "ORCL"."CATEGORIES" ADD CONSTRAINT "CATEGORIES_UK_CATEGORY_NAME" UNIQUE ("CATEGORY_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "ORCL"."CATEGORIES" MODIFY ("CATEGORY_ID" NOT NULL ENABLE);
 
  ALTER TABLE "ORCL"."CATEGORIES" MODIFY ("CATEGORY_NAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table USERS
--------------------------------------------------------

  ALTER TABLE "ORCL"."USERS" MODIFY ("USER_ID" NOT NULL ENABLE);
 
  ALTER TABLE "ORCL"."USERS" ADD CONSTRAINT "USERS_EMP_NUMBER" UNIQUE ("EMPLOYEE_NUMBER")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "ORCL"."USERS" ADD CONSTRAINT "USERS_PK" PRIMARY KEY ("USER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "ORCL"."USERS" ADD CONSTRAINT "USERS_UK_EMAIL" UNIQUE ("EMAIL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "ORCL"."USERS" ADD CONSTRAINT "USERS_UK_USERNAME" UNIQUE ("USERNAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table STATIC_PRODUCT
--------------------------------------------------------

  ALTER TABLE "ORCL"."STATIC_PRODUCT" ADD CONSTRAINT "STATIC_PRODUCT_PK" PRIMARY KEY ("VOUCHER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "ORCL"."STATIC_PRODUCT" ADD CONSTRAINT "STATIC_PRODUCT_SERIAL" UNIQUE ("SERIAL_NUMBER")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "ORCL"."STATIC_PRODUCT" MODIFY ("VOUCHER_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Ref Constraints for Table BORROWING_VOUCHER
--------------------------------------------------------

  ALTER TABLE "ORCL"."BORROWING_VOUCHER" ADD CONSTRAINT "INSERTED_VOUCHERID_FK1" FOREIGN KEY ("INSERTED_VOUCHERID")
	  REFERENCES "ORCL"."VOUCHER_INSERT" ("VOUCHER_ID") ENABLE;
 
  ALTER TABLE "ORCL"."BORROWING_VOUCHER" ADD CONSTRAINT "ORDER_SUPPLIES_ID_FK" FOREIGN KEY ("ORDER_SUPPLIES_ID")
	  REFERENCES "ORCL"."ORDERED_SUPPLIES" ("ORDER_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ORDERED_SUPPLIES
--------------------------------------------------------

  ALTER TABLE "ORCL"."ORDERED_SUPPLIES" ADD CONSTRAINT "ORDERED_SUPPLIES_DEPARTMENT_ID" FOREIGN KEY ("DEPARTMENT_ID")
	  REFERENCES "ORCL"."DEPARTMENTS" ("DEPARTMENT_ID") ENABLE;
 
  ALTER TABLE "ORCL"."ORDERED_SUPPLIES" ADD CONSTRAINT "ORDER_SUPPLIES_PRODUCT_ID" FOREIGN KEY ("PRODUCT_ID")
	  REFERENCES "ORCL"."PRODUCTS" ("PRODUCT_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PRODUCTS
--------------------------------------------------------

  ALTER TABLE "ORCL"."PRODUCTS" ADD CONSTRAINT "PRODUCTS_FK_CATEGORY_ID" FOREIGN KEY ("CATEGORY_ID")
	  REFERENCES "ORCL"."CATEGORIES" ("CATEGORY_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table SERVICES
--------------------------------------------------------

  ALTER TABLE "ORCL"."SERVICES" ADD CONSTRAINT "SERVICES_FK_COMPANY" FOREIGN KEY ("PROVIDED_BY")
	  REFERENCES "ORCL"."COMPANIES" ("COMPANY_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table STATIC_PRODUCT
--------------------------------------------------------

  ALTER TABLE "ORCL"."STATIC_PRODUCT" ADD CONSTRAINT "PRODUCT_FK_VOUCHERID" FOREIGN KEY ("VOUCHER_ID")
	  REFERENCES "ORCL"."VOUCHER_INSERT" ("VOUCHER_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TEMPORARY_OUTPUT
--------------------------------------------------------

  ALTER TABLE "ORCL"."TEMPORARY_OUTPUT" ADD CONSTRAINT "TEMPORARY_OUTPUT_FK1" FOREIGN KEY ("INSERT_VOUCHER_ID")
	  REFERENCES "ORCL"."VOUCHER_INSERT" ("VOUCHER_ID") ENABLE;
 
  ALTER TABLE "ORCL"."TEMPORARY_OUTPUT" ADD CONSTRAINT "TEMPORARY_OUTPUT_FK2" FOREIGN KEY ("COMPANY_ID")
	  REFERENCES "ORCL"."COMPANIES" ("COMPANY_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USERS
--------------------------------------------------------

  ALTER TABLE "ORCL"."USERS" ADD CONSTRAINT "USERS_FK_DEPARTMENT_ID" FOREIGN KEY ("DEPARTMENT_ID")
	  REFERENCES "ORCL"."DEPARTMENTS" ("DEPARTMENT_ID") ON DELETE SET NULL ENABLE;
 
  ALTER TABLE "ORCL"."USERS" ADD CONSTRAINT "USERS_FK_USER_ROLE" FOREIGN KEY ("USER_ROLE")
	  REFERENCES "ORCL"."USERS_ROLES" ("ROLE_ID") ON DELETE SET NULL ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table VOUCHER_INSERT
--------------------------------------------------------

  ALTER TABLE "ORCL"."VOUCHER_INSERT" ADD CONSTRAINT "VOUCHER_INSERT_COMPANY_ID" FOREIGN KEY ("RECEIVED_FROM")
	  REFERENCES "ORCL"."COMPANIES" ("COMPANY_ID") ENABLE;
 
  ALTER TABLE "ORCL"."VOUCHER_INSERT" ADD CONSTRAINT "VOUCHER_INSERT_PRODUCT_ID" FOREIGN KEY ("PRODUCT_ID")
	  REFERENCES "ORCL"."PRODUCTS" ("PRODUCT_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table VOUCHER_OUTPUT
--------------------------------------------------------

  ALTER TABLE "ORCL"."VOUCHER_OUTPUT" ADD CONSTRAINT "VOUCHER_OUTPUT_ORDER_ID" FOREIGN KEY ("ORDER_SUPPLIES_ID")
	  REFERENCES "ORCL"."ORDERED_SUPPLIES" ("ORDER_ID") ENABLE;
--------------------------------------------------------
--  DDL for Trigger TEMPORARY_OUTPUT_TRG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "ORCL"."TEMPORARY_OUTPUT_TRG" 
BEFORE INSERT ON TEMPORARY_OUTPUT 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ORDER_ID IS NULL THEN
      SELECT TEMPORARY_OUTPUT_SEQ.NEXTVAL INTO :NEW.ORDER_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "ORCL"."TEMPORARY_OUTPUT_TRG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger UPDATE_QUNT_AFTER_DEPOSIT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "ORCL"."UPDATE_QUNT_AFTER_DEPOSIT" 
AFTER INSERT OR UPDATE OF UNIT_TYPE,QUANTITY,PRODUCT_ID OR DELETE ON VOUCHER_INSERT 
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
  secondary_qnty NUMBER;
BEGIN
  IF UPDATING THEN
      IF :new.unit_type = 'primary' THEN
        IF :old.unit_type = 'secondary' THEN
          secondary_qnty := PRODUCT_ACTIONS.get_product_quantity(:new.product_id,'secondary');
        END IF;  
        UPDATE products p
        SET p.primary_unit_quantity = 
          CASE 
            WHEN :old.unit_type = 'primary' THEN p.primary_unit_quantity + (:new.quantity - :old.quantity)
            WHEN :old.unit_type = 'secondary' THEN p.primary_unit_quantity + (:new.quantity - :old.quantity * secondary_qnty)
          END
        WHERE p.product_id = :new.product_id;
      ELSIF :new.unit_type = 'secondary' THEN
        secondary_qnty := PRODUCT_ACTIONS.get_product_quantity(:new.product_id,'secondary');
        UPDATE products p
        SET p.primary_unit_quantity = 
        CASE 
            WHEN :old.unit_type = 'primary' THEN p.primary_unit_quantity + (:new.quantity * secondary_qnty - :old.quantity)
            WHEN :old.unit_type = 'secondary' THEN p.primary_unit_quantity + (:new.quantity - :old.quantity) * secondary_qnty
          END
        WHERE p.product_id = :new.product_id; 
      END IF;
  ELSIF INSERTING THEN
      IF :new.unit_type = 'primary' THEN
          UPDATE products p
          SET p.primary_unit_quantity = p.primary_unit_quantity + :new.quantity
          WHERE p.product_id = :new.product_id;
      ELSIF :new.unit_type = 'secondary' THEN
          secondary_qnty := PRODUCT_ACTIONS.get_product_quantity(:new.product_id,'secondary');
          UPDATE ORCL.products p
          SET p.primary_unit_quantity = p.primary_unit_quantity + :new.quantity * secondary_qnty
          WHERE p.product_id = :new.product_id; 
      END IF;
  ELSIF DELETING THEN
      IF :old.unit_type = 'primary' THEN
          UPDATE products p
          SET p.primary_unit_quantity = p.primary_unit_quantity - :old.quantity
          WHERE p.product_id          = :old.product_id;
      ELSIF :old.unit_type          = 'secondary' THEN
          secondary_qnty := PRODUCT_ACTIONS.get_product_quantity(:new.product_id,'secondary');
          UPDATE products p
          SET p.secondary_unit_quantity = p.secondary_unit_quantity- :old.quantity * secondary_qnty
          WHERE p.product_id          = :old.product_id; 
      END IF;
  END IF;
END;
/
ALTER TRIGGER "ORCL"."UPDATE_QUNT_AFTER_DEPOSIT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger UPDATE_QUNT_WITHDRAW_STATIC
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "ORCL"."UPDATE_QUNT_WITHDRAW_STATIC" 
AFTER DELETE OR INSERT OR UPDATE OF INSERTED_VOUCHERID ON BORROWING_VOUCHER 
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    UPDATE products p SET p.primary_unit_quantity = p.primary_unit_quantity - 1
      WHERE p.product_id = (SELECT s.product_id FROM ordered_supplies s WHERE s.order_id = :new.ORDER_SUPPLIES_ID);
    UPDATE ordered_supplies s SET s.status = 'accept' WHERE s.order_id = :new.ORDER_SUPPLIES_ID;
  ELSIF DELETING THEN
    UPDATE products p
    SET p.primary_unit_quantity = p.primary_unit_quantity + 1
    WHERE p.product_id IN (SELECT s.product_id FROM ordered_supplies s WHERE s.order_id = :old.ORDER_SUPPLIES_ID);
  END IF;
END;
/
ALTER TRIGGER "ORCL"."UPDATE_QUNT_WITHDRAW_STATIC" ENABLE;
--------------------------------------------------------
--  DDL for Trigger UPDATE_QUNT_WITHDRAW_TEMP
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "ORCL"."UPDATE_QUNT_WITHDRAW_TEMP" 
AFTER DELETE OR INSERT OR UPDATE OF ORDER_SUPPLIES_ID,QUANTITY_DISBURSED,UNIT_TYPE ON VOUCHER_OUTPUT 
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
  IF UPDATING THEN
      IF :new.unit_type = 'primary' THEN
        UPDATE products p
        SET p.primary_unit_quantity = p.primary_unit_quantity - (:new.quantity_disbursed - :old.quantity_disbursed)
        WHERE p.product_id IN (SELECT s.product_id FROM ordered_supplies s WHERE s.order_id = :new.ORDER_SUPPLIES_ID);
      END IF;
    ELSIF INSERTING THEN
      IF :new.unit_type = 'primary' THEN
          UPDATE products p
          SET p.primary_unit_quantity = p.primary_unit_quantity - :new.quantity_disbursed
          WHERE p.product_id IN (SELECT s.product_id FROM ordered_supplies s WHERE s.order_id = :new.ORDER_SUPPLIES_ID);
      END IF;
      UPDATE ordered_supplies s SET s.status = 'accept' WHERE s.order_id = :new.ORDER_SUPPLIES_ID;
    ELSIF DELETING THEN
      IF :old.unit_type = 'primary' THEN
          UPDATE products p
          SET p.primary_unit_quantity = p.primary_unit_quantity + :old.quantity_disbursed
          WHERE p.product_id IN (SELECT s.product_id FROM ordered_supplies s WHERE s.order_id = :old.ORDER_SUPPLIES_ID);
      END IF;
    END IF;
END;
/
ALTER TRIGGER "ORCL"."UPDATE_QUNT_WITHDRAW_TEMP" ENABLE;
--------------------------------------------------------
--  DDL for Function GETDATA1
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "ORCL"."GETDATA1" (ID in NUMBER)
    RETURN SYS_REFCURSOR
  AS
  
  mycursor SYS_REFCURSOR;
  BEGIN
    OPEN mycursor FOR SELECT product_NAME FROM products WHERE product_id = id;
    
    RETURN mycursor;
  END;

/
--------------------------------------------------------
--  DDL for Function SPLIT
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "ORCL"."SPLIT" (
    in_string    IN VARCHAR2,            -- input string
    in_position  IN PLS_INTEGER,         -- element serial in string series
    in_seperator IN VARCHAR2 DEFAULT ',' -- separator character
  )
  RETURN VARCHAR2
IS
  l_string VARCHAR2 (32767) := in_seperator || in_string;
  l_pos_first PLS_INTEGER;
  l_pos_last PLS_INTEGER;
BEGIN
  l_pos_first    := INSTR (in_string, in_seperator, 1, in_position);
  IF l_pos_first  > 0 THEN
    l_pos_last   := INSTR (in_string, in_seperator, 1, in_position + 1);
    IF l_pos_last = 0 THEN
      l_pos_last := LENGTH (in_string) + 1;
    END IF;
    RETURN (SUBSTR (in_string, l_pos_first + 1, l_pos_last - l_pos_first - 1) );
  ELSE
    RETURN NULL;
  END IF;
END;

/
--------------------------------------------------------
--  DDL for Package CATEGORY_ACTIONS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "ORCL"."CATEGORY_ACTIONS" 
IS
----------------------------------------------------    
  FUNCTION get_categories_id_name
    RETURN SYS_REFCURSOR;
----------------------------------------------------    
  FUNCTION get_all_categories
    RETURN SYS_REFCURSOR;
----------------------------------------------------    
  FUNCTION add_category(
      category_name        IN VARCHAR2,
      category_description IN VARCHAR2,
      subs IN VARCHAR2)
  RETURN NUMBER;
----------------------------------------------------    
  FUNCTION get_category_byID(categoryID  IN NUMBER)
  RETURN SYS_REFCURSOR;
----------------------------------------------------    
  FUNCTION add_subCategory(
      category_name        IN VARCHAR2,
      parentId IN NUMBER)
  RETURN NUMBER;
----------------------------------------------------    
  FUNCTION update_category(
      categoryID          IN NUMBER,
      categoryName        IN VARCHAR2,
      categoryDescription IN VARCHAR2,
      parentID IN NUMBER)
  RETURN NUMBER;
  -----------------------------------------------------------
  FUNCTION delete_category(categoryID  IN NUMBER)
    RETURN NUMBER;
  --------------------------------------------------
  
END CATEGORY_ACTIONS;

/
--------------------------------------------------------
--  DDL for Package COMPANY_ACTIONS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "ORCL"."COMPANY_ACTIONS" 
AS

  FUNCTION get_companies_id_name
    RETURN SYS_REFCURSOR;
------------------------------------------------
  FUNCTION get_all_companies
    RETURN SYS_REFCURSOR;
----------------------------------------------------    
  FUNCTION get_company_byID(companyID  IN NUMBER)
    RETURN SYS_REFCURSOR;
------------------------------------------------
  FUNCTION add_company(
    f_company_name    IN VARCHAR2,
    f_license_number  IN VARCHAR2,
    f_telephone       IN VARCHAR2,
    f_mobile          IN VARCHAR2,
    f_address         IN VARCHAR,
    f_fax_number      IN VARCHAR2)
  RETURN NUMBER;
------------------------------------------------  
  FUNCTION update_company(
    f_company_id      IN NUMBER,
    f_company_name    IN VARCHAR2,
    f_license_number  IN VARCHAR2,
    f_telephone       IN VARCHAR2,
    f_mobile          IN VARCHAR2,
    f_address         IN VARCHAR2,
    f_fax_number      IN VARCHAR2)
  RETURN NUMBER;
  -----------------------------------------------------------
  FUNCTION delete_company(companyID  IN NUMBER)
    RETURN NUMBER;
  --------------------------------------------------
END COMPANY_ACTIONS;

/
--------------------------------------------------------
--  DDL for Package DEPARTMENT_ACTIONS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "ORCL"."DEPARTMENT_ACTIONS" 
AS
  FUNCTION get_depatments_id_name
    RETURN SYS_REFCURSOR;
------------------------------------------------    
  FUNCTION get_department_inventory(
    departmentID IN NUMBER,
    start_date    IN VARCHAR2,
    end_date      IN VARCHAR2)
    RETURN SYS_REFCURSOR;
------------------------------------------------    
  FUNCTION add_department(
    f_department_name  IN VARCHAR2,
    f_address          IN VARCHAR2,
    f_phone            IN VARCHAR2,
    f_mobile           IN VARCHAR2,
    f_fax              IN VARCHAR2,
    f_parent_id        IN NUMBER,
    f_notes            IN VARCHAR2)
  RETURN NUMBER;
-----------------------------------------------------------
  FUNCTION update_department(
    f_department_id    IN NUMBER,
    f_department_name  IN VARCHAR2,
    f_address          IN VARCHAR2,
    f_phone            IN VARCHAR2,
    f_mobile           IN VARCHAR2,
    f_fax              IN VARCHAR2,
    f_parent_id        IN NUMBER,
    f_notes            IN VARCHAR2)
  RETURN NUMBER;
-----------------------------------------------------------
  FUNCTION get_main_department(
    sub_departmentId    IN NUMBER)
    RETURN VARCHAR2;
------------------------------------------------ 
  FUNCTION get_all_departments
    RETURN SYS_REFCURSOR;
----------------------------------------------------
  FUNCTION delete_department(departmentID  IN NUMBER)
    RETURN NUMBER;
------------------------------------------------ 
  FUNCTION get_department_ByID(departmentID  IN NUMBER)
    RETURN SYS_REFCURSOR;
------------------------------------------------     
END DEPARTMENT_ACTIONS;

/
--------------------------------------------------------
--  DDL for Package PRODUCT_ACTIONS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "ORCL"."PRODUCT_ACTIONS" 
AS
  
  TYPE StatisticsList IS TABLE OF statistics_numbers;
  
  -----------------------------------------------------------
  FUNCTION delete_many_inserted_products(
      vouchers in varchar2) RETURN NUMBER;
  ----------------------------------------------------------- 
  FUNCTION getMainStatistics
    RETURN StatisticsList PIPELINED;
  -----------------------------------------------------------  
  FUNCTION add_new_product(
      product_name            IN VARCHAR2,
      product_number          IN VARCHAR2,
      product_type            IN VARCHAR2,
      notes                   IN VARCHAR2,
      category_id             IN NUMBER,
      width                   IN VARCHAR2,
      height                  IN VARCHAR2,
      h_length                IN VARCHAR2,
      re_demand_border        IN NUMBER,
      primary_unit_name       IN VARCHAR2,
      secondary_unit_name     IN VARCHAR2,
      primary_unit_quantity   IN NUMBER,
      secondary_unit_quantity IN NUMBER,
      quantity_status         IN VARCHAR2)
    RETURN NUMBER;
  -----------------------------------------------------------  
  FUNCTION get_all_products
    RETURN SYS_REFCURSOR;
  -----------------------------------------------------------  
  FUNCTION get_static_products
    RETURN SYS_REFCURSOR;
  -----------------------------------------------------------  
  FUNCTION get_static_prod_ByVoucherID(
      f_voucher_id IN NUMBER)
    RETURN SYS_REFCURSOR;
  -----------------------------------------------------------  
  FUNCTION get_temp_prod_ByVoucherID(
      f_voucher_id IN NUMBER)
    RETURN SYS_REFCURSOR;    
  -----------------------------------------------------------  
  FUNCTION get_temp_products
    RETURN SYS_REFCURSOR;
  -----------------------------------------------------------  
  FUNCTION get_inserted_static_prod(
      prod_id IN NUMBER,
      columnData  IN VARCHAR2)
    RETURN SYS_REFCURSOR;
  -----------------------------------------------------------  
  FUNCTION get_inserted_temp_prod(
      prod_id IN NUMBER)
    RETURN SYS_REFCURSOR;
  -----------------------------------------------------------  
  FUNCTION get_product_by_id(
      prod_id IN NUMBER)
    RETURN SYS_REFCURSOR;
  -----------------------------------------------------------  
  FUNCTION update_product(
      f_product_id              IN NUMBER,
      f_product_name            IN VARCHAR2,
      f_product_number          IN VARCHAR2,
      f_product_type            IN VARCHAR2,
      f_notes                   IN VARCHAR2,
      f_category_id             IN NUMBER,
      f_width                   IN VARCHAR2,
      f_height                  IN VARCHAR2,
      f_h_length                IN VARCHAR2,
      f_re_demand_border        IN NUMBER,
      f_primary_unit_name       IN VARCHAR2,
      f_secondary_unit_name     IN VARCHAR2,
      f_primary_unit_quantity   IN NUMBER,
      f_secondary_unit_quantity IN NUMBER,
      f_quantity_status         IN VARCHAR2)
    RETURN NUMBER;
  -----------------------------------------------------------
  FUNCTION delete_product(
      productID  IN NUMBER)
    RETURN NUMBER;
  -----------------------------------------------------------
  FUNCTION delete_inserted_product(
      f_voucher_id  IN NUMBER)
    RETURN NUMBER;
  -----------------------------------------------------------  
  FUNCTION insert_product(
      product_id              IN NUMBER,
      received_from           IN NUMBER,
      billing_id              IN VARCHAR2,
      notes                   IN VARCHAR2,
      receiver_id             IN NUMBER,
      quantity                IN NUMBER,
      unit_type               IN VARCHAR2,
      unit_price              IN NUMBER,
      currency_type           IN VARCHAR2,
      received_date           IN VARCHAR2,
      insert_number           IN VARCHAR2)
    RETURN NUMBER;
 -----------------------------------------------------------  
  FUNCTION insert_static_product(
      product_id              IN NUMBER,
      received_from           IN NUMBER,
      billing_id              IN VARCHAR2,
      notes                   IN VARCHAR2,
      receiver_id             IN NUMBER,
      quantity                IN NUMBER,
      unit_type               IN VARCHAR2,
      unit_price              IN NUMBER,
      currency_type           IN VARCHAR2,
      product_status          IN VARCHAR2,
      product_nature          IN VARCHAR2,
      supply_type             IN VARCHAR2,
      expire_date             IN VARCHAR2,
      serial_number           IN VARCHAR2,
      insert_number           IN VARCHAR2)
    RETURN NUMBER;
 -----------------------------------------------------------   
  FUNCTION update_inserted_static_product(
      f_voucher_id              IN NUMBER,      
      f_received_from           IN VARCHAR2,
      f_billing_id              IN VARCHAR2,
      f_notes                   IN VARCHAR2,
      f_receiver_id             IN NUMBER,
      f_quantity                IN NUMBER,
      f_unit_type               IN VARCHAR2,
      f_unit_price              IN NUMBER,
      f_currency_type           IN VARCHAR2,
      f_product_status          IN VARCHAR2,
      f_product_nature          IN VARCHAR2,
      f_supply_type             IN VARCHAR2,
      f_expire_date             IN VARCHAR2,
      f_serial_number           IN VARCHAR2)
    RETURN NUMBER;
  -----------------------------------------------------------   
  FUNCTION update_inserted_temp_product(
      f_voucher_id              IN NUMBER,      
      f_received_from           IN VARCHAR2,
      f_billing_id              IN VARCHAR2,
      f_notes                   IN VARCHAR2,
      f_receiver_id             IN NUMBER,
      f_quantity                IN NUMBER,
      f_unit_type               IN VARCHAR2,
      f_unit_price              IN NUMBER,
      f_currency_type           IN VARCHAR2)
    RETURN NUMBER;
  -----------------------------------------------------------
  FUNCTION dynamic_product_search(
    search_key  IN VARCHAR)
    RETURN SYS_REFCURSOR;
  -----------------------------------------------------------
  FUNCTION get_product_unit_names(
    product_id  IN NUMBER)
    RETURN SYS_REFCURSOR;
  -----------------------------------------------------------
  FUNCTION get_specific_unit_name(
    productID  IN NUMBER,
    unit_type IN VARCHAR2)
    RETURN VARCHAR2;
  ----------------------------------------------------------- 
  FUNCTION supplies_order(      
      product_id         IN NUMBER,
      quantity           IN NUMBER,
      department_id      IN NUMBER,
      notes              IN VARCHAR2,
      applicant_id       IN NUMBER,
      unit_type          IN VARCHAR2,
      order_number       IN VARCHAR2)
    RETURN NUMBER;
  ----------------------------------------------------------- 
  FUNCTION static_supplies_order(      
      product_id         IN NUMBER,
      quantity           IN NUMBER,
      department_id      IN NUMBER,
      notes              IN VARCHAR2,
      applicant_id       IN NUMBER,
      unit_type          IN VARCHAR2,
      order_number       IN VARCHAR2,
      employee_name      IN VARCHAR2,
      employee_number    IN VARCHAR2,
      section_name       IN VARCHAR2,
      room_number        IN VARCHAR2)
    RETURN NUMBER;
  -----------------------------------------------------------
  FUNCTION get_order_status(ord_number IN VARCHAR2)
    RETURN VARCHAR2;
  ---------------------------------------------------------
  FUNCTION insert_temp_disburse_info(      
      order_supplies_id  IN NUMBER,
      quantity_disbursed IN NUMBER,
      unit_type          IN VARCHAR2,
      notes              IN VARCHAR2,
      acknowledgement    IN NUMBER)
    RETURN NUMBER;
  ---------------------------------------------------------    
    FUNCTION insert_static_disburse_info(      
      order_supplies_id  IN NUMBER,
      notes              IN VARCHAR2,
      return_date        IN VARCHAR2,
      insert_voucher     IN NUMBER)
    RETURN NUMBER;
  -----------------------------------------------------------
  FUNCTION get_supplies_info_byNumber(
      o_number    IN VARCHAR2)
    RETURN SYS_REFCURSOR;
  ----------------------------------------------------------- 
  FUNCTION get_all_ordered_supplies
    RETURN SYS_REFCURSOR;
  -----------------------------------------------------------
  FUNCTION refuse_order(order_number IN VARCHAR2)
    RETURN NUMBER;
  -----------------------------------------------------------
  FUNCTION next_order_number
    RETURN VARCHAR2;
  -----------------------------------------------------------
  FUNCTION next_insert_number
    RETURN VARCHAR2;
  -----------------------------------------------------------
  FUNCTION next_product_number
    RETURN VARCHAR2;
  -------------------------------------------------------------
   --FUNCTION get_all_borrowing
    --RETURN SYS_REFCURSOR;
  -------------------------------------------------------------
   FUNCTION department_borrowing(department_id IN NUMBER)
    RETURN SYS_REFCURSOR;
  -------------------------------------------------------------    
  --FUNCTION get_status_borrowing(bor_id IN NUMBER)
   -- RETURN VARCHAR2;
  --------------------------------------------------------------
  --FUNCTION get_department_status(dep_name IN VARCHAR2)
   -- RETURN VARCHAR2;
  --------------------------------------------------------------
  FUNCTION return_borrowing(f_voucher_id IN NUMBER)
    RETURN NUMBER;
  -------------------------------------------------------------
  /*FUNCTION get_prodID_from_ReturnVoucher(
      borrow_id       IN NUMBER)
      RETURN NUMBER;*/
  -----------------------------------------------------------      
  FUNCTION get_products_id_name(
    prod_type   IN VARCHAR2)
    RETURN SYS_REFCURSOR;
  -----------------------------------------------------------      
  FUNCTION get_company_nameBy_id(
    comp_id        IN NUMBER)
    RETURN VARCHAR2;
  -----------------------------------------------------------      
  FUNCTION get_ProductsBy_CatID(
    f_categoryID  IN NUMBER,
    prodType      IN NUMBER)
    RETURN SYS_REFCURSOR;
  -----------------------------------------------------------      
   FUNCTION get_returned_products
    RETURN SYS_REFCURSOR;
  ---------------------------------------------------------    
    FUNCTION changeProdStatus(      
      productStatus    IN VARCHAR2,
      voucherID        IN NUMBER)
    RETURN NUMBER;
  -----------------------------------------------------------
  FUNCTION extend_date(      
      new_return_date  IN VARCHAR2,
      voucherID        IN NUMBER)
    RETURN NUMBER;
  -------------------------------------------------------------
  FUNCTION get_borrowing_byID(voucherID IN NUMBER)
    RETURN SYS_REFCURSOR;
  -----------------------------------------------------------
  FUNCTION get_product_quantity(
    productID    IN NUMBER,
    unit_type     IN VARCHAR2)
    RETURN NUMBER;
  -----------------------------------------------------------
  FUNCTION get_products_for_damage
    RETURN SYS_REFCURSOR;
  -----------------------------------------------------------
  FUNCTION accept_damage(      
      vouchers       IN VARCHAR2,
      monitor_ways   IN VARCHAR2)
    RETURN NUMBER;
  -------------------------------------------------------------   
  FUNCTION disburse_servicing(      
      voucherID    IN NUMBER,
      reasons      IN VARCHAR2,
      company_id   IN VARCHAR2)
    RETURN NUMBER;
  -----------------------------------------------------------
  FUNCTION get_temporary_output
    RETURN SYS_REFCURSOR;
    ---------------------------------------------------------    
    FUNCTION acceptOutputProduct(      
      productStatus    IN VARCHAR2,
      voucherID        IN NUMBER)
    RETURN NUMBER;
  -------------------------------------------------------------
  FUNCTION getUnreadableOrders
    RETURN SYS_REFCURSOR;
 -------------------------------------------------------------
  FUNCTION getUnreadableOrdersNumber
    RETURN NUMBER;
 -----------------------------------------------------------
 FUNCTION getProductsTopOrdered
    RETURN SYS_REFCURSOR;
  -----------------------------------------------------------
END PRODUCT_ACTIONS;

/
--------------------------------------------------------
--  DDL for Package SERVICE_ACTIONS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "ORCL"."SERVICE_ACTIONS" AS 
----------------------------------------------------
  FUNCTION add_service(
      service_name        IN VARCHAR2,
      provided_by         IN NUMBER,
      billing             IN VARCHAR2,
      service_cost        IN VARCHAR2,
      currency_type       IN VARCHAR2,
      notes               IN VARCHAR2,
      received_date       IN VARCHAR2,
      insert_number       IN VARCHAR2,
      quantity            IN NUMBER)
  RETURN NUMBER;
----------------------------------------------------
    FUNCTION delete_many_services(
      services in varchar2) RETURN NUMBER;
---------------------------------------------------- 
END SERVICE_ACTIONS;

/
--------------------------------------------------------
--  DDL for Package USER_ACTIONS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "ORCL"."USER_ACTIONS" 
AS 
----------------------------------------------------    
  FUNCTION get_all_roles
    RETURN SYS_REFCURSOR;
----------------------------------------------------    
  FUNCTION add_user(
    first_name       IN VARCHAR2,
    middle_name      IN VARCHAR2,
    last_name        IN VARCHAR2,
    employee_number  IN NUMBER,
    username         IN VARCHAR2,
    upassword         IN VARCHAR2,
    phone_number     IN VARCHAR2,
    mobile_number    IN VARCHAR2,
    department_id    IN NUMBER,
    user_role        IN NUMBER,
    email_address    IN VARCHAR2,
    user_picture     IN VARCHAR2,
    account_status   IN VARCHAR2)
  RETURN NUMBER;
----------------------------------------------------
  FUNCTION get_users(fields IN VARCHAR2)
  RETURN SYS_REFCURSOR;
----------------------------------------------------
FUNCTION get_user_byID(userID  IN NUMBER)
  RETURN SYS_REFCURSOR;
---------------------------------------------------- 
  FUNCTION update_user(
    f_user_id          IN NUMBER,
    f_first_name       IN VARCHAR2,
    f_middle_name      IN VARCHAR2,
    f_last_name        IN VARCHAR2,
    f_employee_number  IN NUMBER,
    f_username         IN VARCHAR2,
    f_upassword         IN VARCHAR2,
    f_phone_number     IN VARCHAR2,
    f_mobile_number    IN VARCHAR2,
    f_department_id    IN NUMBER,
    f_user_role        IN NUMBER,
    f_email_address    IN VARCHAR2,
    f_user_picture     IN VARCHAR2,
    f_account_status   IN VARCHAR2)
  RETURN NUMBER;
----------------------------------------------------
  FUNCTION delete_user(userID  IN NUMBER)
    RETURN NUMBER;
--------------------------------------------------
  FUNCTION login(
    f_username   IN VARCHAR2,
    f_password   IN VARCHAR2)
    RETURN SYS_REFCURSOR;
--------------------------------------------------
  FUNCTION users_statistics
    RETURN SYS_REFCURSOR;
--------------------------------------------------  
END USER_ACTIONS;

/
--------------------------------------------------------
--  DDL for Package Body CATEGORY_ACTIONS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "ORCL"."CATEGORY_ACTIONS" 
AS

  FUNCTION get_categories_id_name
    RETURN SYS_REFCURSOR
  AS
    categories_cursor SYS_REFCURSOR;
  BEGIN
    OPEN categories_cursor FOR select root.category_id as root_id,root.category_name  as root_name
     , down1.category_id as down1_id,down1.category_name as down1_name
     , down2.category_id as down2_id,down2.category_name as down2_name
     , down3.category_id as down3_id,down3.category_name as down3_name
    from categories root
    left outer
      join categories down1
        on down1.parent_id = root.category_id
    left outer
      join categories down2
        on down2.parent_id = down1.category_id
    left outer
      join categories down3
        on down3.parent_id = down2.category_id
     where root.parent_id = 0
    order 
        by root_name 
         , down1_name 
         , down2_name 
         , down3_name;
    RETURN categories_cursor;
  END get_categories_id_name;
-----------------------------------------------------------------------
  FUNCTION get_all_categories
    RETURN SYS_REFCURSOR
    AS
      categories_cursor SYS_REFCURSOR;
    BEGIN
      OPEN categories_cursor FOR SELECT c.category_id,c.category_name,c.category_description,
      (SELECT category_name FROM categories r WHERE r.category_id=c.parent_id) AS parent_name, 
      (select COUNT(*) FROM products p WHERE p.category_id= c.category_id) AS products_number
      FROM categories c;
      
      RETURN categories_cursor;
  END get_all_categories;
  -----------------------------------------------------------------------
  FUNCTION add_category(
      category_name        IN VARCHAR2,
      category_description IN VARCHAR2,
      subs IN VARCHAR2)
    RETURN NUMBER AS
    l_element   VARCHAR2(100);
    i           PLS_INTEGER := 1;
    parentId   NUMBER;
    current_num1 NUMBER := 1;
    current_num2 NUMBER := 1;
  BEGIN
    SELECT max(inc_number) INTO current_num1 FROM categories WHERE parent_id = 0;
    IF current_num1 is null THEN current_num1 := 0; END IF;
    INSERT INTO categories (category_id,category_name, category_description,inc_number) 
      VALUES (categories_seq.nextval,category_name,category_description,current_num1 + 1);
     
    SELECT categories_seq.currval INTO parentId FROM dual;
    LOOP
      l_element := SPLIT (subs, i, ',');
      EXIT WHEN l_element IS NULL;
      SELECT max(inc_number) INTO current_num2 FROM categories WHERE parent_id = parentId;
      IF current_num2 is null THEN current_num2 := 0; END IF;
      INSERT INTO categories (category_id,category_name, parent_id, inc_number) 
      VALUES (categories_seq.nextval,l_element,parentId, current_num2 + 1);
      i := i + 1;
    END LOOP;
    IF SQL%ROWCOUNT > 0 THEN
      COMMIT;
      RETURN 1;
    END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN 0;
  END add_category;
-------------------------------------------------------------------------
  FUNCTION get_category_byID(categoryID  IN NUMBER)
    RETURN SYS_REFCURSOR 
    AS
      categories_cursor SYS_REFCURSOR;
    BEGIN 
      OPEN categories_cursor FOR SELECT * FROM categories WHERE category_id = categoryID;
      RETURN categories_cursor;
    END get_category_byID;
-------------------------------------------------------------------------    
  FUNCTION add_subCategory(
      category_name   IN VARCHAR2,
      parentId       IN NUMBER)
    RETURN NUMBER AS
    current_num NUMBER := 1;
    BEGIN
      SELECT max(inc_number) INTO current_num FROM categories WHERE parent_id = parentId;
      IF current_num is null THEN current_num := 0; END IF;
      INSERT INTO categories (category_id,category_name, parent_id, inc_number) 
        VALUES (categories_seq.nextval,category_name,parentId, current_num + 1);
      
      IF SQL%ROWCOUNT > 0 THEN
        COMMIT;
        RETURN 1;
      END IF;
      EXCEPTION
        WHEN OTHERS THEN
          ROLLBACK;
          RETURN 0;
  END add_subCategory;
  -----------------------------------------------------------------------------
  FUNCTION update_category(
      categoryID          IN NUMBER,
      categoryName        IN VARCHAR2,
      categoryDescription IN VARCHAR2,
      parentID IN NUMBER)
    RETURN NUMBER AS 
    BEGIN 
      UPDATE categories SET category_name= categoryName,category_description= categoryDescription,parent_id=parentID WHERE category_id= categoryID;
      
      IF SQL%ROWCOUNT > 0 THEN
        COMMIT;
        RETURN 1;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN 0;
    END update_category;
  -----------------------------------------------------------
  FUNCTION delete_category(categoryID  IN NUMBER)
    RETURN NUMBER AS
  BEGIN
    DELETE FROM categories WHERE category_ID = categoryID;
    IF SQL%ROWCOUNT > 0 THEN
      COMMIT;
      RETURN 1;
    END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN 0;
  END delete_category;
  -----------------------------------------------------------------------------
END CATEGORY_ACTIONS;

/
--------------------------------------------------------
--  DDL for Package Body COMPANY_ACTIONS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "ORCL"."COMPANY_ACTIONS" AS

  FUNCTION get_companies_id_name
    RETURN SYS_REFCURSOR 
  AS
    company_cursor SYS_REFCURSOR;
  BEGIN
    OPEN company_cursor FOR SELECT company_name,company_id FROM companies;
    RETURN company_cursor;
  END get_companies_id_name;
  -----------------------------------------------------------------------
  FUNCTION get_all_companies
    RETURN SYS_REFCURSOR
  AS
    companies_cursor SYS_REFCURSOR;
  BEGIN
    OPEN companies_cursor FOR SELECT * FROM companies;
    
    RETURN companies_cursor;
    CLOSE companies_cursor;
  END get_all_companies;
  -------------------------------------------------------------------------
  FUNCTION get_company_byID(companyID  IN NUMBER)
    RETURN SYS_REFCURSOR 
    AS
      companies_cursor SYS_REFCURSOR;
    BEGIN 
      OPEN companies_cursor FOR SELECT * FROM companies WHERE company_id = companyID;
      RETURN companies_cursor;
    END get_company_byID;
------------------------------------------------
  FUNCTION add_company(
    f_company_name    IN VARCHAR2,
    f_license_number  IN VARCHAR2,
    f_telephone       IN VARCHAR2,
    f_mobile          IN VARCHAR2,
    f_address         IN VARCHAR,
    f_fax_number      IN VARCHAR2)
  RETURN NUMBER AS
  BEGIN
  
   INSERT INTO companies (company_id,company_name,license_number,telephone,mobile,address,fax_number) 
     VALUES (COMPANIES_SEQ.NEXTVAL,f_company_name,f_license_number,f_telephone,f_mobile,f_address,f_fax_number);
   
   IF SQL%ROWCOUNT > 0 THEN
     COMMIT;
     RETURN 1;
   END IF;
   EXCEPTION
     WHEN OTHERS THEN
       ROLLBACK;
       RETURN 0;
  END add_company;
------------------------------------------------
FUNCTION update_company(
    f_company_id      IN NUMBER,
    f_company_name    IN VARCHAR2,
    f_license_number  IN VARCHAR2,
    f_telephone       IN VARCHAR2,
    f_mobile          IN VARCHAR2,
    f_address         IN VARCHAR2,
    f_fax_number      IN VARCHAR2)
    RETURN NUMBER AS 
    BEGIN 
      UPDATE companies SET company_name= f_company_name,license_number= f_license_number,telephone=f_telephone,mobile=f_mobile,address=f_address,fax_number=f_fax_number WHERE company_id= f_company_id;
      
      IF SQL%ROWCOUNT > 0 THEN
        COMMIT;
        RETURN 1;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN 0;
    END update_company;
  -----------------------------------------------------------
  FUNCTION delete_company(companyID  IN NUMBER)
    RETURN NUMBER AS
  BEGIN
    DELETE FROM companies WHERE company_id = companyID;
    IF SQL%ROWCOUNT > 0 THEN
      COMMIT;
      RETURN 1;
    END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN 0;
  END delete_company;
  -----------------------------------------------------------------------------
END COMPANY_ACTIONS;

/
--------------------------------------------------------
--  DDL for Package Body DEPARTMENT_ACTIONS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "ORCL"."DEPARTMENT_ACTIONS" AS

  FUNCTION get_depatments_id_name
    RETURN SYS_REFCURSOR
  AS
    departments_cursor SYS_REFCURSOR;
  BEGIN
    OPEN departments_cursor FOR select root.department_id as root_id,root.department_name  as root_name
     , down1.department_id as down1_id,down1.department_name as down1_name
    from departments root
    left outer
      join departments down1
        on down1.parent_id = root.department_id
     where root.parent_id = 0
    order 
        by root_name 
         , down1_name;
    RETURN departments_cursor;
  END get_depatments_id_name;
-----------------------------------------------------  
  FUNCTION get_department_inventory(
    departmentID  IN NUMBER,
    start_date    IN VARCHAR2,
    end_date      IN VARCHAR2)
    RETURN SYS_REFCURSOR
  AS
    inventory_cursor SYS_REFCURSOR;
  BEGIN
    --OPEN inventory_cursor FOR SELECT j.product_name,j.status,j.added_date,j.notes 
    --                      FROM borrowing_join_orders_view j WHERE j.department_id = departmentID AND to_char(j.added_date,'yyyy/mm/dd') BETWEEN  start_date AND end_date;
    RETURN inventory_cursor;
  END get_department_inventory;
-----------------------------------------------------
  FUNCTION add_department(
      f_department_name  IN VARCHAR2,
      f_address          IN VARCHAR2,
      f_phone            IN VARCHAR2,
      f_mobile           IN VARCHAR2,
      f_fax              IN VARCHAR2,
      f_parent_id        IN NUMBER,
      f_notes            IN VARCHAR2)
    RETURN NUMBER AS
  BEGIN
   INSERT INTO departments (department_id,department_name, address, phone, notes,parent_id,mobile,fax) 
     VALUES (DEPARTMENTS_SEQ.NEXTVAL,f_department_name,f_address,f_phone,f_notes,f_parent_id,f_mobile,f_fax);
   IF SQL%ROWCOUNT > 0 THEN
     COMMIT;
     RETURN 1;
   END IF;
   EXCEPTION
     WHEN OTHERS THEN
       ROLLBACK;
       RETURN 0;
  END add_department;
  -----------------------------------------------------------
  FUNCTION update_department(
    f_department_id    IN NUMBER,
    f_department_name  IN VARCHAR2,
    f_address          IN VARCHAR2,
    f_phone            IN VARCHAR2,
    f_mobile           IN VARCHAR2,
    f_fax              IN VARCHAR2,
    f_parent_id        IN NUMBER,
    f_notes            IN VARCHAR2)
  RETURN NUMBER AS
  BEGIN
   UPDATE departments SET department_name=f_department_name, address= f_address, phone=f_phone, notes= f_notes,parent_id= f_parent_id,mobile= f_mobile,fax= f_fax
     WHERE department_id = f_department_id;
   IF SQL%ROWCOUNT > 0 THEN
     COMMIT;
     RETURN 1;
   END IF;
   EXCEPTION
     WHEN OTHERS THEN
       ROLLBACK;
       RETURN 0;
  END update_department;
  -----------------------------------------------------
  FUNCTION get_main_department(
      sub_departmentId  IN NUMBER)
    RETURN VARCHAR2 AS
    main_department VARCHAR2(40);
  BEGIN
    SELECT department_name INTO main_department FROM departments WHERE department_id = (select parent_id from departments where department_id = sub_departmentId);
    RETURN main_department;
  END get_main_department;
  -------------------------------------------------------------- 
  FUNCTION delete_department(departmentID  IN NUMBER)
    RETURN NUMBER AS
  BEGIN
    DELETE FROM departments WHERE department_id = departmentID;
    IF SQL%ROWCOUNT > 0 THEN
      COMMIT;
      RETURN 1;
    END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN 0;
  END delete_department;
-----------------------------------------------------     
  FUNCTION get_all_departments
    RETURN SYS_REFCURSOR
  AS
    departments_cursor SYS_REFCURSOR;
  BEGIN
    OPEN departments_cursor FOR select root.department_name as root_name,root.address as root_address,u.user_id,u.first_name,u.last_name,u.middle_name
     ,down1.department_id as down1_id,down1.department_name as down1_name,down1.address as down1_address,down1.MOBILE,down1.PHONE,down1.fax,down1.notes
    from departments root
    right outer
      join departments down1
        on down1.parent_id = root.department_id
     left outer join users u on down1.department_id = u.department_id
     where root.parent_id = 0
    order 
        by root_name 
         , down1_name;
    RETURN departments_cursor;
  END get_all_departments;
----------------------------------------------------- 
  FUNCTION get_department_ByID(departmentID  IN NUMBER)
    RETURN SYS_REFCURSOR
  AS
    departments_cursor SYS_REFCURSOR;
  BEGIN
    OPEN departments_cursor FOR select root.department_id as root_id,root.department_name as root_name,root.address as root_address,root.notes as root_notes
     ,down1.department_id as down1_id,down1.department_name as down1_name,down1.address as down1_address,down1.MOBILE,down1.PHONE,down1.fax,down1.notes as down1_notes
    from departments root
    left outer
      join departments down1
        on down1.parent_id = root.department_id
     left outer join users u on down1.department_id = u.department_id
     where down1.department_id = departmentID
    order 
        by root_name 
         , down1_name;
    RETURN departments_cursor;
  END get_department_ByID;
-----------------------------------------------------
END DEPARTMENT_ACTIONS;

/
--------------------------------------------------------
--  DDL for Package Body PRODUCT_ACTIONS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "ORCL"."PRODUCT_ACTIONS" AS


  FUNCTION delete_many_inserted_products(
    vouchers in varchar2) RETURN NUMBER AS
    l_element   VARCHAR2(100);
    i           PLS_INTEGER := 1;
    BEGIN
    LOOP
      l_element := SPLIT (vouchers, i, ',');
      EXIT WHEN l_element IS NULL;
        DELETE FROM voucher_insert WHERE voucher_ID = to_number(l_element);
      i := i + 1;
    END LOOP;
    IF SQL%ROWCOUNT > 0 THEN
      COMMIT;
      RETURN 1;
    END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN 0;
  END delete_many_inserted_products;
-----------------------------------------------------------  
  /*FUNCTION dontDisburseOrders(
    orders in varchar2) RETURN NUMBER AS
    l_element   VARCHAR2(100);
    i           PLS_INTEGER := 1;
    BEGIN
    LOOP
      l_element := SPLIT (orders, i, ',');
      EXIT WHEN l_element IS NULL;
        UPDATE ORDERED_SUPPLIES SET STATUS = 'waiting' WHERE ORDER_NUMBER = to_number(l_element);
      i := i + 1;
    END LOOP;
    IF SQL%ROWCOUNT > 0 THEN
      COMMIT;
      RETURN 1;
    END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN 0;
  END dontDisburseOrders;*/
-----------------------------------------------------------
  FUNCTION add_new_product(
      product_name            IN VARCHAR2,
      product_number          IN VARCHAR2,
      product_type            IN VARCHAR2,
      notes                   IN VARCHAR2,
      category_id             IN NUMBER,
      width                   IN VARCHAR2,
      height                  IN VARCHAR2,
      h_length                IN VARCHAR2,
      re_demand_border        IN NUMBER,
      primary_unit_name       IN VARCHAR2,
      secondary_unit_name     IN VARCHAR2,
      primary_unit_quantity   IN NUMBER,
      secondary_unit_quantity IN NUMBER,
      quantity_status         IN VARCHAR2)
    RETURN NUMBER AS
  BEGIN
    INSERT INTO products (product_id,product_name, product_number, product_type, notes, category_id, width, height, h_length, re_demand_border, primary_unit_name, secondary_unit_name, primary_unit_quantity, secondary_unit_quantity,quantity_status) 
      VALUES (products_seq.nextval,add_new_product.product_name,add_new_product.product_number,product_type,notes,add_new_product.category_id,width,height,h_length,re_demand_border,primary_unit_name,secondary_unit_name,primary_unit_quantity,secondary_unit_quantity,quantity_status);
    IF SQL%ROWCOUNT > 0 THEN
      COMMIT;
      RETURN 1;
    END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN 0;
  END add_new_product;
-----------------------------------------------------------
  FUNCTION get_all_products
    RETURN SYS_REFCURSOR
  AS
    products_cursor SYS_REFCURSOR;
  BEGIN
    OPEN products_cursor FOR SELECT product_id,product_name, product_number, product_type, notes, category_id, width, height, h_length, re_demand_border, primary_unit_name, primary_unit_quantity,quantity_status FROM products;
    RETURN products_cursor;
  END get_all_products;
  -----------------------------------------------------------
  FUNCTION get_static_products
    RETURN SYS_REFCURSOR
  AS
    products_cursor SYS_REFCURSOR;
  BEGIN
    OPEN products_cursor FOR SELECT product_id,product_name, product_number, notes, width, height, h_length, re_demand_border, primary_unit_name,secondary_unit_name, primary_unit_quantity,quantity_status FROM products where product_type=2;
    RETURN products_cursor;
  END get_static_products;
-------------------------------------------------------------
  /*FUNCTION get_get_product_type(bor_id IN NUMBER)
    RETURN VARCHAR2 
    AS
      found Number;
      --basic Number;
    BEGIN 
      SELECT SUM(QUANTITY_RETURNED) INTO found FROM RETURN_VOUCHER WHERE BORROWING_ID = bor_id;
      --SELECT SUM(QUANTITY) INTO basic FROM BORROWING_VOUCHER WHERE VOUCHER_ID = bor_id;
      if found > 0 then
        return 'true';
      end if;
      return 'false';
  END get_get_product_type;*/
  -------------------------------------------------------------
  FUNCTION get_inserted_static_prod(
      prod_id     IN NUMBER,
      columnData  IN VARCHAR2)
    RETURN SYS_REFCURSOR
    AS
      product_cursor SYS_REFCURSOR;
    BEGIN
    IF columnData = 'all' THEN
      OPEN product_cursor FOR SELECT i.*,get_company_nameBy_id(i.received_from) as company_name,
      get_specific_unit_name(i.product_id,i.unit_type) AS unit_name FROM INSERTED_STATIC_PRODUCT i WHERE product_id = prod_id;
    ELSIF columnData = 'part' THEN
      OPEN product_cursor FOR SELECT i.product_status,product_nature,serial_number,expire_date,unit_price,supply_type,voucher_id,
      get_company_nameBy_id(i.received_from) AS company_name FROM INSERTED_STATIC_PRODUCT i WHERE product_id = prod_id AND reserve_status ='متاح';
    END IF;
        RETURN product_cursor;
    EXCEPTION
      WHEN OTHERS THEN    
        CLOSE product_cursor;
        RAISE NO_DATA_FOUND;
    END get_inserted_static_prod;
  -------------------------------------------------------------
  FUNCTION get_inserted_temp_prod(
      prod_id IN NUMBER)
    RETURN SYS_REFCURSOR
  AS
    product_cursor SYS_REFCURSOR;
  BEGIN
    OPEN product_cursor FOR SELECT v.*,get_company_nameBy_id(v.received_from) as company_name,
                            get_specific_unit_name(v.product_id,v.unit_type) as unit_name
                            FROM voucher_insert v WHERE v.product_id = prod_id;
      RETURN product_cursor;
  EXCEPTION
    WHEN OTHERS THEN    
      CLOSE product_cursor;
      RAISE NO_DATA_FOUND;
  END get_inserted_temp_prod;
-------------------------------------------------------------
  FUNCTION get_product_by_id(
      prod_id IN NUMBER)
    RETURN SYS_REFCURSOR
  AS
    product_cursor SYS_REFCURSOR;
  BEGIN
    OPEN product_cursor FOR SELECT * FROM products p WHERE p.PRODUCT_ID = prod_id;
      RETURN product_cursor;
  EXCEPTION
    WHEN OTHERS THEN    
      CLOSE product_cursor;
      RAISE NO_DATA_FOUND;
  END get_product_by_id;
  -------------------------------------------------------------
  FUNCTION get_static_prod_ByVoucherID(
      f_voucher_id IN NUMBER)
    RETURN SYS_REFCURSOR
  AS
    product_cursor SYS_REFCURSOR;
  BEGIN
    OPEN product_cursor FOR SELECT p.product_name,p.secondary_unit_name,p.primary_unit_name,i.voucher_id,i.received_from,
         i.billing_id,i.notes,i.quantity,i.unit_price,i.unit_type,i.currency_type,i.serial_number,i.supply_type,i.product_status,
         i.product_nature,i.expire_date FROM (select p.product_name,p.secondary_unit_name,p.primary_unit_name,p.product_id from products p) p
         JOIN INSERTED_STATIC_PRODUCT i ON p.product_id= i.product_id and voucher_id = f_voucher_id;
                            
      RETURN product_cursor;
  EXCEPTION
    WHEN OTHERS THEN
      CLOSE product_cursor;
      RAISE NO_DATA_FOUND;
  END get_static_prod_ByVoucherID;
  -------------------------------------------------------------
  FUNCTION get_temp_products
    RETURN SYS_REFCURSOR
  AS
    product_cursor SYS_REFCURSOR;
  BEGIN
    OPEN product_cursor FOR SELECT product_type,product_id,product_name, product_number,width, height, h_length, primary_unit_name, secondary_unit_name,
    primary_unit_quantity,quantity_status FROM products where product_type=1;
                            
    RETURN product_cursor;
  EXCEPTION
    WHEN OTHERS THEN
      CLOSE product_cursor;
      RAISE NO_DATA_FOUND;
  END get_temp_products;
  -------------------------------------------------------------
  FUNCTION get_temp_prod_ByVoucherID(
      f_voucher_id IN NUMBER)
    RETURN SYS_REFCURSOR
  AS
    product_cursor SYS_REFCURSOR;
  BEGIN
    OPEN product_cursor FOR SELECT p.product_name,p.secondary_unit_name,p.primary_unit_name,v.*
         FROM (select p.product_name,p.secondary_unit_name,p.primary_unit_name,p.product_id from products p) p
         JOIN voucher_insert v ON p.product_id= v.product_id and voucher_id = f_voucher_id;
                            
      RETURN product_cursor;
  EXCEPTION
    WHEN OTHERS THEN
      CLOSE product_cursor;
      RAISE NO_DATA_FOUND;
  END get_temp_prod_ByVoucherID;  
  ----------------------------------------------------------- 
  FUNCTION update_product(
      f_product_id              IN NUMBER,
      f_product_name            IN VARCHAR2,
      f_product_number          IN VARCHAR2,
      f_product_type            IN VARCHAR2,
      f_notes                   IN VARCHAR2,
      f_category_id             IN NUMBER,
      f_width                   IN VARCHAR2,
      f_height                  IN VARCHAR2,
      f_h_length                IN VARCHAR2,
      f_re_demand_border        IN NUMBER,
      f_primary_unit_name       IN VARCHAR2,
      f_secondary_unit_name     IN VARCHAR2,
      f_primary_unit_quantity   IN NUMBER,
      f_secondary_unit_quantity IN NUMBER,
      f_quantity_status         IN VARCHAR2)
    RETURN NUMBER AS
  BEGIN
    UPDATE products SET product_name = f_product_name, product_number = f_product_number, product_type = f_product_type,notes = f_notes,
    category_id = f_category_id,width = f_width, height = f_height, h_length = f_h_length, re_demand_border = f_re_demand_border,primary_unit_name = f_primary_unit_name,
    secondary_unit_name = f_secondary_unit_name, primary_unit_quantity = f_primary_unit_quantity, secondary_unit_quantity = f_secondary_unit_quantity,quantity_status = f_quantity_status
    WHERE product_id = f_product_id;
    IF SQL%ROWCOUNT > 0 THEN
      COMMIT;
      RETURN 1;
    END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN 0;
  END update_product;
  -----------------------------------------------------------
  FUNCTION delete_product(
      productID  IN NUMBER)
    RETURN NUMBER AS
  BEGIN
    DELETE FROM PRODUCTS WHERE PRODUCT_ID = productID;
    IF SQL%ROWCOUNT > 0 THEN
      COMMIT;
      RETURN 1;
    END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN 0;
  END delete_product;
  -----------------------------------------------------------
  FUNCTION delete_inserted_product(
      f_voucher_id  IN NUMBER)
    RETURN NUMBER AS
  BEGIN
    DELETE FROM voucher_insert WHERE voucher_ID = f_voucher_id;
    IF SQL%ROWCOUNT > 0 THEN
      COMMIT;
      RETURN 1;
    END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN 0;
  END delete_inserted_product;
  -----------------------------------------------------------
  FUNCTION insert_product(      
      product_id              IN NUMBER,
      received_from           IN NUMBER,
      billing_id              IN VARCHAR2,
      notes                   IN VARCHAR2,
      receiver_id             IN NUMBER,
      quantity                IN NUMBER,
      unit_type               IN VARCHAR2,
      unit_price              IN NUMBER,
      currency_type           IN VARCHAR2,
      received_date           IN VARCHAR2,
      insert_number           IN VARCHAR2)
    RETURN NUMBER AS
    current_id NUMBER;
  BEGIN    
    INSERT INTO voucher_insert (voucher_id,product_id, received_from, billing_id, notes, receiver_id, quantity, unit_type, unit_price, currency_type,received_date,insert_number)
    VALUES (voucher_insert_seq.nextval,product_id, received_from, billing_id, notes, receiver_id,quantity, unit_type, unit_price, currency_type,received_date,insert_number);
    
    SELECT VOUCHER_INSERT_SEQ.CURRVAL INTO current_id FROM DUAL;
    IF SQL%ROWCOUNT > 0 THEN
      COMMIT;
      RETURN current_id;
    END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN -1;
  END insert_product;
  -----------------------------------------------------------
  FUNCTION insert_static_product(      
      product_id              IN NUMBER,
      received_from           IN NUMBER,
      billing_id              IN VARCHAR2,
      notes                   IN VARCHAR2,
      receiver_id             IN NUMBER,
      quantity                IN NUMBER,
      unit_type               IN VARCHAR2,
      unit_price              IN NUMBER,
      currency_type           IN VARCHAR2,
      product_status          IN VARCHAR2,
      product_nature          IN VARCHAR2,
      supply_type             IN VARCHAR2,
      expire_date             IN VARCHAR2,
      serial_number           IN VARCHAR2,
      insert_number           IN VARCHAR2)
    RETURN NUMBER AS
  BEGIN    
    SAVEPOINT beforInsert;
    INSERT INTO voucher_insert (voucher_id,product_id, received_from, billing_id, notes, receiver_id, quantity, unit_type, unit_price, currency_type,insert_number)
    VALUES (voucher_insert_seq.nextval,product_id, received_from, billing_id, notes, receiver_id,quantity, unit_type, unit_price, currency_type,insert_number);
    
    INSERT INTO static_product (voucher_id,product_status, product_nature, supply_type, expire_date,serial_number)
    VALUES (voucher_insert_seq.CURRVAL,product_status, product_nature, supply_type, expire_date,serial_number);
    
    COMMIT;
    RETURN 1;
    EXCEPTION
      WHEN OTHERS THEN
        --raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        ROLLBACK TO beforInsert;
        RETURN 0;
  END insert_static_product;
  ----------------------------------------------------------- 
  FUNCTION update_inserted_static_product(
      f_voucher_id              IN NUMBER,
      f_received_from           IN VARCHAR2,
      f_billing_id              IN VARCHAR2,
      f_notes                   IN VARCHAR2,
      f_receiver_id             IN NUMBER,
      f_quantity                IN NUMBER,
      f_unit_type               IN VARCHAR2,
      f_unit_price              IN NUMBER,
      f_currency_type           IN VARCHAR2,
      f_product_status          IN VARCHAR2,
      f_product_nature          IN VARCHAR2,
      f_supply_type             IN VARCHAR2,
      f_expire_date             IN VARCHAR2,
      f_serial_number           IN VARCHAR2)
    RETURN NUMBER AS
  BEGIN
    SAVEPOINT beforUpdate;
    UPDATE voucher_insert SET received_from= f_received_from, billing_id= f_billing_id, notes= f_notes, receiver_id= f_receiver_id, quantity= f_quantity, unit_type= f_unit_type, unit_price= f_unit_price, currency_type= f_currency_type
    WHERE voucher_id= f_voucher_id; 
    
    UPDATE static_product SET product_status= f_product_status, product_nature= f_product_nature, supply_type= f_supply_type, expire_date= f_expire_date,serial_number= f_serial_number
    WHERE voucher_id = f_voucher_id;
    
    COMMIT;
    RETURN 1;
    EXCEPTION
      WHEN OTHERS THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        ROLLBACK TO beforUpdate;
        RETURN 0;
  END update_inserted_static_product;
  ----------------------------------------------------------- 
  FUNCTION update_inserted_temp_product(
      f_voucher_id              IN NUMBER,
      f_received_from           IN VARCHAR2,
      f_billing_id              IN VARCHAR2,
      f_notes                   IN VARCHAR2,
      f_receiver_id             IN NUMBER,
      f_quantity                IN NUMBER,
      f_unit_type               IN VARCHAR2,
      f_unit_price              IN NUMBER,
      f_currency_type           IN VARCHAR2)
    RETURN NUMBER AS
  BEGIN
    UPDATE voucher_insert SET received_from= f_received_from, billing_id= f_billing_id, notes= f_notes, receiver_id= f_receiver_id, quantity= f_quantity, unit_type= f_unit_type, unit_price= f_unit_price, currency_type= f_currency_type
    WHERE voucher_id= f_voucher_id; 
    
    COMMIT;
    RETURN 1;
    EXCEPTION
      WHEN OTHERS THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        ROLLBACK TO beforUpdate;
        RETURN 0;
  END update_inserted_temp_product;
  -----------------------------------------------------------
  FUNCTION dynamic_product_search(
    search_key  IN VARCHAR)
    RETURN SYS_REFCURSOR
  AS
    products_cursor SYS_REFCURSOR;
  BEGIN
    OPEN products_cursor FOR SELECT product_id,product_name FROM products WHERE product_name LIKE search_key||'%' OR product_number LIKE search_key||'%' ORDER BY product_name ASC;
    RETURN products_cursor;
  END dynamic_product_search;
  -----------------------------------------------------------
  FUNCTION get_product_unit_names(
    product_id  IN NUMBER)
    RETURN SYS_REFCURSOR
  AS
    units_cursor SYS_REFCURSOR;
  BEGIN
    OPEN units_cursor FOR SELECT primary_unit_name,secondary_unit_name FROM products WHERE product_id = get_product_unit_names.product_id;
    RETURN units_cursor;
  END get_product_unit_names;
  -----------------------------------------------------------
  FUNCTION get_specific_unit_name(
    productID  IN NUMBER,
    unit_type   IN VARCHAR2)
    RETURN VARCHAR2
  AS
    spec_unit_name VARCHAR2(20);
  BEGIN
    IF unit_type = 'primary' THEN
      SELECT primary_unit_name INTO spec_unit_name FROM products p WHERE p.product_id = productID;
    ELSIF unit_type = 'secondary' THEN
      SELECT secondary_unit_name INTO spec_unit_name FROM products p WHERE p.product_id = productID;
    END IF;
    
    RETURN spec_unit_name;
  END get_specific_unit_name;
  -----------------------------------------------------------
  FUNCTION supplies_order(      
      product_id         IN NUMBER,
      quantity           IN NUMBER,
      department_id      IN NUMBER,
      notes              IN VARCHAR2,
      applicant_id       IN NUMBER,
      unit_type          IN VARCHAR2,
      order_number       IN VARCHAR2)
    RETURN NUMBER AS
    --order_num VARCHAR2(20) := PRODUCT_ACTIONS.NEXT_ORDER_NUMBER_TEMP();
  BEGIN
    INSERT INTO ordered_supplies (order_id,product_id, quantity, department_id, notes, applicant_id, unit_type, order_number)
    VALUES (ordered_supplies_seq.nextval,product_id, quantity, department_id, notes, applicant_id, unit_type, order_number);
    
    IF SQL%ROWCOUNT > 0 THEN
      COMMIT;
      RETURN 1;
    END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN 0;
  END supplies_order;
  -----------------------------------------------------------
  FUNCTION static_supplies_order(      
      product_id         IN NUMBER,
      quantity           IN NUMBER,
      department_id      IN NUMBER,
      notes              IN VARCHAR2,
      applicant_id       IN NUMBER,
      unit_type          IN VARCHAR2,
      order_number       IN VARCHAR2,
      employee_name      IN VARCHAR2,
      employee_number    IN VARCHAR2,
      section_name       IN VARCHAR2,
      room_number        IN VARCHAR2)
    RETURN NUMBER AS
    --order_num VARCHAR2(20) := PRODUCT_ACTIONS.NEXT_ORDER_NUMBER_TEMP();
  BEGIN
    INSERT INTO ordered_supplies (order_id,product_id, quantity, department_id, notes,applicant_id,
        unit_type, order_number,employee_name,employee_number,section_name,room_number)
      VALUES (ordered_supplies_seq.nextval,product_id, quantity, department_id, notes, applicant_id,
        unit_type, order_number,employee_name,employee_number,section_name,room_number);
    
    IF SQL%ROWCOUNT > 0 THEN
      COMMIT;
      RETURN 1;
    END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN 0;
  END static_supplies_order;
  -----------------------------------------------------------
  FUNCTION insert_temp_disburse_info(      
      order_supplies_id  IN NUMBER,
      quantity_disbursed IN NUMBER,
      unit_type          IN VARCHAR2,
      notes            IN VARCHAR2,
      acknowledgement    IN NUMBER)
      RETURN NUMBER AS
    BEGIN
        INSERT INTO voucher_output (voucher_id,ORDER_SUPPLIES_ID, QUANTITY_DISBURSED, UNIT_TYPE, NOTES)
        VALUES (voucher_output_seq.nextval,order_supplies_id, quantity_disbursed, unit_type, notes);
      IF SQL%ROWCOUNT > 0 THEN
        COMMIT;
        RETURN acknowledgement;
      END IF;
      EXCEPTION
        WHEN OTHERS THEN
          ROLLBACK;
          RETURN -1;
    END insert_temp_disburse_info;
  -----------------------------------------------------------
  FUNCTION insert_static_disburse_info(      
      order_supplies_id  IN NUMBER,
      notes              IN VARCHAR2,
      return_date        IN VARCHAR2,
      insert_voucher     IN NUMBER)
      RETURN NUMBER AS
    BEGIN
       INSERT INTO BORROWING_VOUCHER (VOUCHER_ID,ORDER_SUPPLIES_ID,INSERTED_VOUCHERID,RETURN_DATE,NOTES) 
        VALUES(BORROWING_VOUCHER_SEQ.nextval,order_supplies_id,insert_voucher,return_date,notes);
        
        UPDATE static_product s SET s.reserve_status= 'محجوز' WHERE s.voucher_id= insert_voucher;
      IF SQL%ROWCOUNT > 0 THEN
        COMMIT;
        RETURN 1;
      END IF;
      EXCEPTION
        WHEN OTHERS THEN
          ROLLBACK;
          RETURN 0;
    END insert_static_disburse_info;
  -----------------------------------------------------------
  FUNCTION get_supplies_info_byNumber(
      o_number IN VARCHAR2)
  RETURN SYS_REFCURSOR
    AS
    supplies_info_cursor SYS_REFCURSOR;
    productType NUMBER;
  BEGIN
    SELECT DISTINCT product_type INTO productType FROM ORDERS_JOIN_PRODUCTS WHERE order_number = o_number;
    IF productType = 1 THEN
      OPEN supplies_info_cursor FOR SELECT s.product_name,s.quantity,s.department_name,s.notes,s.unit_type,s.order_id,
      s.secondary_unit_name,s.secondary_unit_quantity,s.primary_unit_name,s.primary_unit_quantity,s.status FROM ORDERS_JOIN_PRODUCTS s WHERE ORDER_NUMBER = o_number;
    ELSIF productType = 2 THEN
      OPEN supplies_info_cursor FOR SELECT * FROM ORDERS_JOIN_PRODUCTS WHERE ORDER_NUMBER = o_number;
    END IF;
    RETURN supplies_info_cursor;
  END get_supplies_info_byNumber;
-----------------------------------------------------------
  FUNCTION get_all_ordered_supplies
    RETURN SYS_REFCURSOR
  AS
    orders_cursor SYS_REFCURSOR;
  BEGIN
    OPEN orders_cursor FOR SELECT DISTINCT s.order_number,s.product_type,get_order_status(order_number) as status,s.department_name,s.main_department,
    to_char(s.added_date,'yyyy/mm/dd') as added_date FROM ORDERS_JOIN_PRODUCTS s;
    
    RETURN orders_cursor;
  END get_all_ordered_supplies;
-----------------------------------------------------------
  FUNCTION get_order_status(ord_number IN VARCHAR2)
    RETURN VARCHAR2
  AS
   status VARCHAR2(20);
   waiting BOOLEAN := false;
   accept BOOLEAN  := false;
   refuse BOOLEAN  := false;
   CURSOR c_status is
      SELECT STATUS FROM ORDERED_SUPPLIES where ORDER_NUMBER=ord_number;
  BEGIN
   OPEN c_status;
   LOOP
      FETCH c_status into status;
      EXIT WHEN c_status%notfound;
      --dbms_output.put_line(status || ' ');
      IF (status = 'waiting') THEN
          waiting := true;
      ElSIF (status='accept') THEN
          accept := true;
      ELSIF (status='refuse') THEN
          refuse := true;
      END IF;
      --return status;
   END LOOP;
   CLOSE c_status;
   IF accept and (waiting or refuse) THEN
      return 'some';
   ELSIF accept and (not waiting and not refuse) THEN
      return 'accept';
   ELSIF refuse and (not accept and not waiting) THEN
      return 'refuse';
   ELSIF waiting and (not accept and not refuse) THEN
      return 'waiting';
   END IF;
  END get_order_status;
----------------------------------------------------------- 
 FUNCTION refuse_order(order_number IN VARCHAR2)
    RETURN NUMBER AS
  BEGIN
    UPDATE ORDERED_SUPPLIES SET STATUS = 'refuse' WHERE ORDER_NUMBER = refuse_order.order_number;
    IF SQL%ROWCOUNT > 0 THEN
      COMMIT;
      RETURN 1;
    END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN 0;
  END refuse_order;   
----------------------------------------------------------- 
 FUNCTION next_order_number
    RETURN VARCHAR2 AS
    next_seq_val Number:=1;
    curr_year VARCHAR2(20);
    o_num VARCHAR2(40);
    lastDate VARCHAR2(40);
    found NUMBER;
  BEGIN
    select to_char(sysdate, 'YYYY') into curr_year from dual;
    select LAST_NUMBER into next_seq_val FROM USER_SEQUENCES WHERE sequence_name = 'ORDER_NUMBER_SEQ';
    o_num := curr_year||'/'||next_seq_val;
    SELECT count(*),max(added_date) INTO found,lastDate FROM ORDERED_SUPPLIES WHERE ORDER_NUMBER = o_num;
    IF to_char(sysdate, 'YYYY') < curr_year THEN
       execute immediate 'DROP sequence ' || 'INC_ORDER_NUMBER';
       execute immediate 'CREATE SEQUENCE  ORDER_NUMBER_SEQ  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 ORDER  NOCYCLE'; 
    END IF;
    IF found > 0 THEN
      select ORDER_NUMBER_SEQ.nextval INTO next_seq_val from DUAL;
      select LAST_NUMBER into next_seq_val FROM USER_SEQUENCES WHERE sequence_name = 'ORDER_NUMBER_SEQ';
      o_num := curr_year||'/'||next_seq_val;
    END IF;
    RETURN o_num;
 END next_order_number;   
 ----------------------------------------------------------- 
 FUNCTION next_insert_number
    RETURN VARCHAR2 AS
    next_seq_val Number:=1;
    curr_year VARCHAR2(20);
    o_num VARCHAR2(40);
    lastDate VARCHAR2(40);
    found NUMBER;
  BEGIN
    select to_char(sysdate, 'YYYY') into curr_year from dual;
    select LAST_NUMBER into next_seq_val FROM USER_SEQUENCES WHERE sequence_name = 'INSERT_NUMBER_SEQ';
    o_num := curr_year||'/'||next_seq_val;
    SELECT count(*),max(added_date) INTO found,lastDate FROM VOUCHER_INSERT WHERE INSERT_NUMBER = o_num;
    IF to_char(sysdate, 'YYYY') < curr_year THEN
       execute immediate 'DROP sequence ' || 'INC_ORDER_NUMBER';
       execute immediate 'CREATE SEQUENCE  INSERT_NUMBER_SEQ  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 ORDER  NOCYCLE'; 
    END IF;
    IF found > 0 THEN
      select INSERT_NUMBER_SEQ.nextval INTO next_seq_val from DUAL;
      select LAST_NUMBER into next_seq_val FROM USER_SEQUENCES WHERE sequence_name = 'INSERT_NUMBER_SEQ';
      o_num := curr_year||'/'||next_seq_val;  
    END IF;
    RETURN o_num;
 END next_insert_number;
 -------------------------------------------------
 FUNCTION next_product_number
    RETURN VARCHAR2 AS
    next_seq_val Number:=1;
    p_num VARCHAR2(40);
    found NUMBER;
  BEGIN
    SELECT LAST_NUMBER into next_seq_val FROM USER_SEQUENCES WHERE sequence_name = 'PRODUCTS_SEQ';
    p_num := next_seq_val;
    SELECT count(*) INTO found FROM VOUCHER_INSERT WHERE INSERT_NUMBER = p_num;
    IF found > 0 THEN
      select PRODUCTS_SEQ.nextval INTO next_seq_val from DUAL;
      select LAST_NUMBER into next_seq_val FROM USER_SEQUENCES WHERE sequence_name = 'PRODUCTS_SEQ';
      p_num := next_seq_val;  
    END IF;
    RETURN p_num;
 END next_product_number;
 -------------------------------------------------
 /*FUNCTION next_order_number_temp
    RETURN VARCHAR2 AS
    next_seq_val Number;
    curr_year VARCHAR2(20);
    o_num VARCHAR2(20);
    --aaa SYS_REFCURSOR;
  BEGIN
    select to_char(sysdate, 'YYYY') into curr_year from dual;
    select LAST_NUMBER into next_seq_val FROM USER_SEQUENCES WHERE sequence_name = 'ORDER_NUMBER_SEQ';
    --select order_number_seq.currval into next_seq_val from DUAL;
    o_num := curr_year||'/'||next_seq_val;
    RETURN o_num;
 END next_order_number_temp;*/
 -------------------------------------------------
  /*FUNCTION get_all_borrowing
    RETURN SYS_REFCURSOR
    AS
    borrowing_cursor SYS_REFCURSOR;
  BEGIN
    OPEN borrowing_cursor FOR SELECT DISTINCT DEPARTMENT_NAME,get_department_status(DEPARTMENT_NAME) as status FROM BORROWING_JOIN_ORDERS_VIEW;
    RETURN borrowing_cursor;
  END get_all_borrowing;*/
  -------------------------------------------------
  FUNCTION department_borrowing(
    department_id     IN NUMBER)
    RETURN SYS_REFCURSOR
    AS
    borrowing_cursor SYS_REFCURSOR;
  BEGIN
    OPEN borrowing_cursor FOR SELECT b.product_name,b.added_date,b.employee_name,b.room_number,b.return_date,b.product_status,b.serial_number,b.notes,b.voucher_id,order_status
      FROM BORROWING_INFO b WHERE b.department_id = department_id AND order_status != 'end';
    RETURN borrowing_cursor;
  END department_borrowing;
  ------------------------------------------------
  /*FUNCTION get_status_borrowing(bor_id IN NUMBER)
    RETURN VARCHAR2 
    AS
      found Number;
      --basic Number;
    BEGIN 
      SELECT SUM(QUANTITY_RETURNED) INTO found FROM RETURN_VOUCHER WHERE BORROWING_ID = bor_id;
      --SELECT SUM(QUANTITY) INTO basic FROM BORROWING_VOUCHER WHERE VOUCHER_ID = bor_id;
      if found > 0 then
        return 'true';
      end if;
      return 'false';
  END get_status_borrowing;*/
  -------------------------------------------------
  /*FUNCTION get_department_status(dep_name IN VARCHAR2)
    RETURN VARCHAR2
  AS
   status VARCHAR2(20);
   true_ BOOLEAN := false;
   false_ BOOLEAN  := false;
   --refuse BOOLEAN  := false;
   CURSOR c_status is
      SELECT STATUS FROM BORROWING_JOIN_ORDERS_VIEW where DEPARTMENT_NAME=dep_name;
  BEGIN
   OPEN c_status;
   LOOP
      FETCH c_status into status;
      EXIT WHEN c_status%notfound;
      --dbms_output.put_line(status || ' ');
      IF (status = 'true') THEN
          true_ := true;
      ElSIF (status='false') THEN
          false_ := true;
      END IF;
      --return status;
   END LOOP;
   CLOSE c_status;
   IF true_ and false_ THEN
      return 'some';
   ELSIF true_ and not false_ THEN
      return 'true';
   ELSIF false_ and not true_ THEN
      return 'false';
   END IF;
  END get_department_status;*/
  -----------------------------------------------------
  FUNCTION return_borrowing(f_voucher_id IN NUMBER)
    RETURN NUMBER AS 
    BEGIN 
      SAVEPOINT beforUpdate;
      UPDATE borrowing_voucher SET order_status = 'inactive' WHERE voucher_id= f_voucher_id;
      
      IF SQL%ROWCOUNT > 0 THEN
      COMMIT;
      RETURN 1;
    END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK TO before;
        RETURN 0;
    END return_borrowing;
  --------------------------------------------------------------------------
  /*FUNCTION get_prodID_from_ReturnVoucher(
      borrow_id     IN NUMBER)
      RETURN NUMBER
      AS
        prod_id NUMBER;
      BEGIN
        select b.product_id INTO prod_id from BORROWING_JOIN_ORDERS_VIEW b where b.VOUCHER_ID = borrow_id;
      RETURN prod_id;
    END get_prodID_from_ReturnVoucher;*/
  --------------------------------------------------------------------------------
  FUNCTION get_products_id_name(
    prod_type   IN VARCHAR2)
    RETURN SYS_REFCURSOR
    AS
    product_cursor SYS_REFCURSOR;
  BEGIN
    IF prod_type = 'static' THEN
      OPEN product_cursor FOR SELECT product_name,product_id FROM products WHERE product_type = 2;
    ELSIF prod_type = 'temp' THEN
      OPEN product_cursor FOR SELECT product_name,product_id FROM products WHERE product_type = 1;
    END IF;
    RETURN product_cursor;
  END get_products_id_name;
  --------------------------------------------------------------------------------  
  FUNCTION get_company_nameBy_id(comp_id IN NUMBER)
    RETURN VARCHAR2 
    AS
      comp_name VARCHAR2(25);
    BEGIN 
      SELECT company_name INTO comp_name FROM companies WHERE company_id = comp_id;
      RETURN comp_name;
    EXCEPTION
      WHEN OTHERS THEN
        RETURN 'غير موجود';
  END get_company_nameBy_id;
  --------------------------------------------------------------------------------  
  FUNCTION get_ProductsBy_CatID(
    f_categoryID  IN NUMBER,
    prodType      IN NUMBER)
    RETURN SYS_REFCURSOR
    AS
    products_cursor SYS_REFCURSOR;
  BEGIN
    OPEN products_cursor FOR SELECT product_id,product_name, product_number,width, height, h_length, primary_unit_name, secondary_unit_name,
    primary_unit_quantity,secondary_unit_quantity FROM products WHERE product_type = prodType AND category_id IN(SELECT category_id FROM categories
    WHERE parent_id = f_categoryID OR category_id = f_categoryID);
    
    RETURN products_cursor;
  END get_ProductsBy_CatID;
  --------------------------------------------------------------------------------  
  FUNCTION get_returned_products
    RETURN SYS_REFCURSOR
    AS
    returns_cursor SYS_REFCURSOR;
  BEGIN
    OPEN returns_cursor FOR SELECT b.product_name,b.department_name,b.main_department,b.added_date,b.return_date,b.product_status,b.serial_number,b.voucher_id,b.order_status,b.section_name
      FROM BORROWING_INFO b WHERE b.order_status = 'inactive' OR b.return_date <= to_char(sysdate, 'yyyy/mm/dd');
    
    RETURN returns_cursor;
  END get_returned_products;
  --------------------------------------------------------------------------------
  FUNCTION changeProdStatus(
      productStatus    IN VARCHAR2,
      voucherID        IN NUMBER) /*related to borrowing voucher*/
    RETURN NUMBER AS 
    inserted_voucher NUMBER;
    BEGIN
      SAVEPOINT beforUpdate;
      UPDATE borrowing_voucher SET order_status = 'end' WHERE voucher_id= voucherID;
      SELECT inserted_voucherID INTO inserted_voucher FROM borrowing_voucher WHERE voucher_id= voucherID;
      IF productstatus = 'تالفه' THEN
        UPDATE static_product SET reserve_status= 'تالف', product_status= productStatus WHERE voucher_id= inserted_voucher;
      ELSE
        UPDATE static_product SET reserve_status= 'متاح', product_status= productStatus WHERE voucher_id= inserted_voucher;
    
        UPDATE products p SET p.primary_unit_quantity = p.primary_unit_quantity + 1
        WHERE p.product_id = (SELECT product_id FROM voucher_insert WHERE voucher_id = inserted_voucher);
      END IF;
      
      IF SQL%ROWCOUNT > 0 THEN
      COMMIT;
      RETURN 1;
    END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK TO before;
        RETURN 0;
    END changeProdStatus;
  --------------------------------------------------------------------------
  FUNCTION extend_date(
      new_return_date  IN VARCHAR2,
      voucherID        IN NUMBER) /*related to borrowing voucher*/
    RETURN NUMBER AS 
    BEGIN 
      UPDATE borrowing_voucher SET order_status= 'active',return_date= new_return_date WHERE voucher_id= voucherID;
      
      IF SQL%ROWCOUNT > 0 THEN
        COMMIT;
        RETURN 1;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN 0;
    END extend_date;
  ----------------------------------------------------------------
  FUNCTION get_borrowing_byID(voucherID IN NUMBER)
    RETURN SYS_REFCURSOR
    AS
    borrowing_info_cursor SYS_REFCURSOR;
  BEGIN
    OPEN borrowing_info_cursor FOR SELECT b.product_name,b.department_name,b.added_date,b.employee_name,b.employee_number,
    b.room_number,b.return_date,b.product_status,b.serial_number,b.section_name,d.address,d.phone
      FROM BORROWING_INFO b,DEPARTMENTS d WHERE b.voucher_id = voucherID AND d.department_id= b.department_id ;
    RETURN borrowing_info_cursor;
  END get_borrowing_byID;
  --------------------------------------------------------------------------
  FUNCTION get_product_quantity(
    productID  IN NUMBER,
    unit_type   IN VARCHAR2)
    RETURN NUMBER
  AS
    quantity NUMBER;
  BEGIN
    IF unit_type = 'primary' THEN
      SELECT primary_unit_quantity INTO quantity FROM products p WHERE p.product_id = productID;
    ELSIF unit_type = 'secondary' THEN
      SELECT secondary_unit_quantity INTO quantity FROM products p WHERE p.product_id = productID;
    END IF;
    
    RETURN quantity;
  END get_product_quantity;
  --------------------------------------------------------------------------
  FUNCTION get_products_for_damage
    RETURN SYS_REFCURSOR
  AS
    products_cursor SYS_REFCURSOR;
  BEGIN
      OPEN products_cursor FOR SELECT i.voucher_id,f.product_number,f.width,f.height,f.h_length,b.product_name,b.main_department,b.department_name,b.serial_number,b.return_date FROM borrowing_info b
         JOIN INSERTED_STATIC_PRODUCT i ON i.reserve_status='تالف' AND b.product_id= i.product_id AND b.order_status='end' JOIN products f ON b.product_id =f.product_id;
    RETURN products_cursor;
  END get_products_for_damage;
  -----------------------------------------------------------------------
  FUNCTION accept_damage(
      vouchers       IN VARCHAR2,
      monitor_ways   IN VARCHAR2)
    RETURN NUMBER AS
    l_element   VARCHAR2(100);
    i           PLS_INTEGER    := 1;
  BEGIN
    LOOP
      l_element := SPLIT (vouchers, i, ',');
      EXIT WHEN l_element IS NULL;
      
      INSERT INTO supplies_corrupted (order_id,insert_voucher_id, monitor_ways,damage_members) 
      VALUES (SUPPLIES_CORRUPTED_SEQ.NEXTVAL,l_element,monitor_ways,1);
      
      UPDATE static_product SET reserve_status= 'تم إتلافة'WHERE voucher_id= l_element;
      i := i + 1;
    END LOOP;
    IF SQL%ROWCOUNT > 0 THEN
      COMMIT;
      RETURN 1;
    END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN 0;
  END accept_damage;
  -----------------------------------------------------------
  FUNCTION disburse_servicing(
      voucherID   IN NUMBER,
      reasons      IN VARCHAR2,
      company_id   IN VARCHAR2)
    RETURN NUMBER AS
  BEGIN
      INSERT INTO TEMPORARY_OUTPUT (order_id,insert_voucher_id,reasons,company_id) 
      VALUES (TEMPORARY_OUTPUT_SEQ.NEXTVAL,voucherID,reasons,company_id);
      
      UPDATE static_product s SET s.reserve_status= 'إخراج مؤقت' WHERE s.voucher_id= voucherID;
    IF SQL%ROWCOUNT > 0 THEN
      COMMIT;
      RETURN 1;
    END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN 0;
  END disburse_servicing;
  --------------------------------------------------------------
  FUNCTION get_temporary_output
    RETURN SYS_REFCURSOR
  AS
    products_cursor SYS_REFCURSOR;
  BEGIN
    OPEN products_cursor FOR SELECT (select product_name from products p where p.product_id= i.product_id) as product_name,
    i.serial_number,i.voucher_id,product_status,get_company_nameBy_id(i.received_from) as company_name,
    t.reasons,get_company_nameBy_id(t.company_id) as send_to,to_char(t.added_date,'DD/MM/YYYY HH PM') as added_date
      FROM INSERTED_STATIC_PRODUCT i JOIN TEMPORARY_OUTPUT t ON t.order_status= 'wait' AND t.insert_voucher_id = i.voucher_id;
    
    RETURN products_cursor;
  END get_temporary_output;
  --------------------------------------------------------------
  FUNCTION acceptOutputProduct(
      productStatus    IN VARCHAR2,
      voucherID        IN NUMBER)
    RETURN NUMBER AS 
    BEGIN
      SAVEPOINT beforUpdate;
      IF productstatus = 'تالفه' THEN
        UPDATE static_product SET reserve_status= 'تالف', product_status= productStatus WHERE voucher_id= voucherID;
        UPDATE temporary_output SET order_status= 'end' WHERE insert_voucher_id= voucherID;
      ELSE
        UPDATE static_product SET reserve_status= 'متاح', product_status= productStatus WHERE voucher_id= voucherID;
        UPDATE temporary_output SET order_status= 'end' WHERE insert_voucher_id= voucherID;
      END IF;
      
      IF SQL%ROWCOUNT > 0 THEN
      COMMIT;
      RETURN 1;
    END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK TO before;
        RETURN 0;
    END acceptOutputProduct;
  --------------------------------------------------------------------------
  FUNCTION getUnreadableOrders
    RETURN SYS_REFCURSOR
  AS
    orders_cursor SYS_REFCURSOR;
  BEGIN
    OPEN orders_cursor FOR SELECT DISTINCT s.order_number,s.product_type,s.department_name,s.main_department,
    to_char(s.added_date,'DD/MM/YYYY HH PM') as added_date FROM ORDERS_JOIN_PRODUCTS s WHERE s.notify_status= 'unreadable' AND rownum < 8;
    
    RETURN orders_cursor;
  END getUnreadableOrders;
  --------------------------------------------------------------  
  FUNCTION getUnreadableOrdersNumber
    RETURN NUMBER
  AS
    orderCounts NUMBER;
  BEGIN
     SELECT COUNT(DISTINCT s.order_number) INTO orderCounts FROM ORDERS_JOIN_PRODUCTS s WHERE s.notify_status= 'unreadable';
    
    RETURN orderCounts;
  END getUnreadableOrdersNumber;
  -----------------------------------------------------------------------
  FUNCTION getMainStatistics RETURN StatisticsList PIPELINED AS
      v_MyType statistics_numbers;
      users_count NUMBER;
      products_count NUMBER;
      orders_count NUMBER;
      subDepartments_count NUMBER;
      messages_count NUMBER;
      notifications_count NUMBER;
    BEGIN
      SELECT count(*) INTO users_count FROM users;
      SELECT count(*) INTO products_count FROM products;
      SELECT count(*) INTO orders_count FROM ordered_supplies WHERE STATUS = 'waiting';
      SELECT count(*) INTO subDepartments_count FROM departments WHERE parent_id != 0;
        v_MyType := statistics_numbers(users_count, products_count,orders_count,subDepartments_count);
        PIPE ROW(v_MyType);
      RETURN;
   END getMainStatistics;
  -----------------------------------------------------------------------
  FUNCTION getProductsTopOrdered
    RETURN SYS_REFCURSOR
  AS
    productsInfo SYS_REFCURSOR;
  BEGIN
    OPEN productsInfo FOR SELECT * FROM (SELECT product_name,product_id,COUNT(*) AS orders_count FROM ORDERS_JOIN_PRODUCTS GROUP BY product_name,product_id) WHERE ROWNUM <=10 ORDER BY orders_count DESC;
    RETURN productsInfo;
  END getProductsTopOrdered;
  --------------------------------------------------------------  
END PRODUCT_ACTIONS;

/
--------------------------------------------------------
--  DDL for Package Body SERVICE_ACTIONS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "ORCL"."SERVICE_ACTIONS" AS

  FUNCTION add_service(
      service_name        IN VARCHAR2,
      provided_by         IN NUMBER,
      billing             IN VARCHAR2,
      service_cost        IN VARCHAR2,
      currency_type       IN VARCHAR2,
      notes               IN VARCHAR2,
      received_date       IN VARCHAR2,
      insert_number       IN VARCHAR2,
      quantity            IN NUMBER)
  RETURN NUMBER AS
  current_id NUMBER;
  BEGIN
    INSERT INTO services (service_id,service_name,provided_by,billing_id,service_cost,currency_type,notes,received_date,insert_number,quantity) 
        VALUES (services_seq.nextval,service_name,provided_by,billing,service_cost,currency_type,notes,received_date,insert_number,quantity);
      
    SELECT SERVICES_SEQ.CURRVAL INTO current_id FROM DUAL;
      IF SQL%ROWCOUNT > 0 THEN
        COMMIT;
        RETURN current_id;
      END IF;
      EXCEPTION
        WHEN OTHERS THEN
          ROLLBACK;
          RETURN -1;
  END add_service;
--------------------------------------------------------------  
  FUNCTION delete_many_services(
    services in varchar2) RETURN NUMBER AS
    l_element   VARCHAR2(100);
    i           PLS_INTEGER := 1;
    BEGIN
    LOOP
      l_element := SPLIT (services, i, ',');
      EXIT WHEN l_element IS NULL;
        DELETE FROM services WHERE service_id = to_number(l_element);
      i := i + 1;
    END LOOP;
    IF SQL%ROWCOUNT > 0 THEN
      COMMIT;
      RETURN 1;
    END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN 0;
  END delete_many_services;
  --------------------------------------------------------------  
END SERVICE_ACTIONS;

/
--------------------------------------------------------
--  DDL for Package Body USER_ACTIONS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "ORCL"."USER_ACTIONS" AS
--------------------------------------------------------------
  FUNCTION get_all_roles
    RETURN SYS_REFCURSOR 
    AS
    roles_cursor SYS_REFCURSOR;
  BEGIN
    OPEN roles_cursor FOR SELECT * FROM users_roles;
    
    RETURN roles_cursor;
  END get_all_roles;
--------------------------------------------------------------
  FUNCTION add_user(
    first_name       IN VARCHAR2,
    middle_name      IN VARCHAR2,
    last_name        IN VARCHAR2,
    employee_number  IN NUMBER,
    username         IN VARCHAR2,
    upassword         IN VARCHAR2,
    phone_number     IN VARCHAR2,
    mobile_number    IN VARCHAR2,
    department_id    IN NUMBER,
    user_role        IN NUMBER,
    email_address    IN VARCHAR2,
    user_picture     IN VARCHAR2,
    account_status   IN VARCHAR2)
  RETURN NUMBER AS
  BEGIN
  
   INSERT INTO users (user_id,first_name,middle_name,last_name,employee_number,username,user_password,phone_number,mobile_number,department_id,user_role,email,user_picture,account_status)
     VALUES (USERS_SEQ.NEXTVAL,first_name,middle_name,last_name,employee_number,username,upassword,phone_number,mobile_number,department_id,user_role,email_address,user_picture,account_status);
   
   IF SQL%ROWCOUNT > 0 THEN
     COMMIT;
     RETURN 1;
   END IF;
   EXCEPTION
     WHEN OTHERS THEN
       ROLLBACK;
       RETURN 0;
  END add_user;
-------------------------------------------------------------- 
  FUNCTION get_users(fields IN  VARCHAR2)
    RETURN SYS_REFCURSOR 
    AS
    users_cursor SYS_REFCURSOR;
  BEGIN
    OPEN users_cursor FOR 'SELECT ' ||fields|| ' FROM USER_INFORMATIONS';
    RETURN users_cursor;
  END get_users;
--------------------------------------------------------------
  FUNCTION get_user_byID(userID  IN NUMBER)
    RETURN SYS_REFCURSOR 
    AS
      user_cursor SYS_REFCURSOR;
    BEGIN 
      OPEN user_cursor FOR SELECT * FROM USER_INFORMATIONS WHERE user_id = userID;
      RETURN user_cursor;
    END get_user_byID;
------------------------------------------------------------------------- 
  FUNCTION update_user(
    f_user_id          IN NUMBER,
    f_first_name       IN VARCHAR2,
    f_middle_name      IN VARCHAR2,
    f_last_name        IN VARCHAR2,
    f_employee_number  IN NUMBER,
    f_username         IN VARCHAR2,
    f_upassword        IN VARCHAR2,
    f_phone_number     IN VARCHAR2,
    f_mobile_number    IN VARCHAR2,
    f_department_id    IN NUMBER,
    f_user_role        IN NUMBER,
    f_email_address    IN VARCHAR2,
    f_user_picture     IN VARCHAR2,
    f_account_status   IN VARCHAR2)
  RETURN NUMBER AS
  BEGIN
   UPDATE users SET first_name= f_first_name,middle_name= f_middle_name,last_name= f_last_name,employee_number= f_employee_number,
     username= f_username,user_password= f_upassword,phone_number= f_phone_number,mobile_number= f_mobile_number,department_id= f_department_id,
     user_role= f_user_role,email= f_email_address,user_picture= f_user_picture,account_status= f_account_status
      WHERE user_id = f_user_id;
    
   IF SQL%ROWCOUNT > 0 THEN
     COMMIT;
     RETURN 1;
   END IF;
   EXCEPTION
     WHEN OTHERS THEN
       ROLLBACK;
       RETURN 0;
  END update_user;
-------------------------------------------------------------- 
  FUNCTION delete_user(userID  IN NUMBER)
    RETURN NUMBER AS
  BEGIN
    DELETE FROM users WHERE user_ID = userID;
    IF SQL%ROWCOUNT > 0 THEN
      COMMIT;
      RETURN 1;
    END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RETURN 0;
  END delete_user;
-----------------------------------------------------------------------------
  FUNCTION login(
    f_username   IN VARCHAR2,
    f_password   IN VARCHAR2)
    RETURN SYS_REFCURSOR 
    AS
      user_cursor SYS_REFCURSOR;
    BEGIN 
      OPEN user_cursor FOR SELECT user_id,first_name,middle_name,last_name,department_id,lastloggenindate,user_picture,account_status,user_role FROM USER_INFORMATIONS WHERE username= f_username AND user_password= f_password;
      IF user_cursor%ROWCOUNT >-1 THEN
       UPDATE users SET lastloggenindate = sysdate WHERE username= f_username AND user_password= f_password;
      END IF;
      RETURN user_cursor;
    END login;  
-----------------------------------------------------------------------------
  FUNCTION users_statistics
    RETURN SYS_REFCURSOR 
    AS
    users_cursor SYS_REFCURSOR;
  BEGIN
  OPEN users_cursor FOR SELECT (SELECT COUNT(*) FROM users WHERE account_status='inactive' )AS inactive_users,(SELECT COUNT(*) FROM users WHERE account_status='active')AS active_users FROM  users GROUP BY ACCOUNT_STATUS;
    RETURN users_cursor;
  END users_statistics;
--------------------------------------------------------------
END USER_ACTIONS;

/
